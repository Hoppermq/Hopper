run:
  # default concurrency is a available CPU number
  concurrency: 4

  # timeout for analysis, e.g. 30s, 5m, default is 1m
  timeout: 1m

  # exit code when at least one issue was found, default is 1
  issues-exit-code: 1

  # include test files or not, default is true
  tests: true

# all available settings of specific linters
linters-settings:
  errcheck:
    # report about not checking of errors in type assetions: `a := b.(MyStruct)`;
    # default is false: such cases aren't reported by default.
    check-type-assertions: false

    # report about assignment of errors to blank identifier: `num, _ := strconv.Atoi(numStr)`;
    # default is false: such cases aren't reported by default.
    check-blank: false

  funlen:
    lines: 80
    statements: 40

  govet:
    # settings per analyzer
    settings:
      printf: # analyzer name, run `go tool vet help` to see all analyzers
        funcs: # run `go tool vet help printf` to see available settings for `printf` analyzer
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Infof
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Warnf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Errorf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Fatalf

    # enable or disable analyzers by name
    enable:
      - atomicalign
      - shadow
    #  - fieldalignment
    enable-all: false
    disable-all: false
  golint:
    # minimal confidence for issues, default is 0.8
    min-confidence: 0
  gofmt:
    # simplify code: gofmt with `-s` option, true by default
    simplify: true
  goimports:
    # put imports beginning with prefix after 3rd-party packages;
    # it's a comma-separated list of prefixes
    local-prefixes: github.com/hoppermq/
  gocyclo:
    # minimal code complexity to report, 30 by default (but we recommend 10-20)
    min-complexity: 15
  gocognit:
    # minimal code complexity to report, 30 by default (but we recommend 10-20)
    min-complexity: 30
  maligned:
    # print struct with more effective memory layout or not, false by default
    suggest-new: true
  goconst:
    # minimal length of string constant, 3 by default
    min-len: 3
    # minimal occurrences count to trigger, 3 by default
    min-occurrences: 3
  misspell:
    # Correct spellings using locale preferences for US or UK.
    # Default is to use a neutral variety of English.
    # Setting locale to US will correct the British spelling of 'colour' to 'color'.
    locale: US
    ignore-words:
      - someword
  lll:
    # max line length, lines longer will be reported. Default is 120.
    # '\t' is counted as 1 character by default, and can be changed with the tab-width option
    line-length: 120
    # tab width in spaces. Default to 1.
    tab-width: 1
  unparam:
    # Inspect exported functions, default is false. Set to true if no external program/library imports your code.
    # XXX: if you enable this setting, unparam will report a lot of false-positives in text editors:
    # if it's called for subdir of a project it can't find external interfaces. All text editor integrations
    # with golangci-lint call it on a directory with the changed file.
    check-exported: false
  nakedret:
    # make an issue if func has more lines of code than this setting and it has naked returns; default is 30
    max-func-lines: 30
  prealloc:
    # XXX: we don't recommend using this linter before doing performance profiling.
    # For most programs usage of prealloc will be a premature optimization.

    # Report preallocation suggestions only on simple loops that have no returns/breaks/continues/gotos in them.
    # True by default.
    simple: true
    range-loops: true # Report preallocation suggestions on range loops, true by default
    for-loops: false # Report preallocation suggestions on for loops, false by default
  gocritic:
    # Enable multiple checks by tags, run `GL_DEBUG=gocritic golangci-lint run` to see all tags and checks.
    # Empty list by default. See https://github.com/go-critic/go-critic#usage -> section "Tags".
    enabled-tags:
      - performance

    settings: # settings passed to gocritic
      captLocal: # must be valid enabled check name
        paramsOnly: true
      rangeValCopy:
        sizeThreshold: 32
        skipTestFuncs: true
  godox:
    # report any comments starting with keywords, this is useful for TODO or FIXME comments that
    # might be left in the code accidentally and should be resolved before merging
    keywords: # default keywords are TODO, BUG, and FIXME, these can be overwritten by this setting
      - NOTE
      - OPTIMIZE # marks code that should be optimized before merging
      - HACK # marks hack-arounds that should be removed before merging
  dogsled:
    # checks assignments with too many blank identifiers; default is 2
    max-blank-identifiers: 2
  varnamelen: # https://github.com/blizzy78/varnamelen?tab=readme-ov-file#golangci-lint-integration
    ignore-names:
      - err
    ignore-decls:
      - c echo.Context
      - c *gin.Context
      - t testing.T
      - i int
      - T any
  whitespace:
    multi-if: false   # Enforces newlines (or comments) after every multi-line if statement
    multi-func: false # Enforces newlines (or comments) after every multi-line function signature
  depguard:
    rules:
      prevent_unmaintained_packages:
        list-mode: lax # allow unless explicitely d
        files:
          - $all
          - "!$test"
        allow:
          - $gostd
        deny:
          - pkg: io/ioutil
            desc: "replaced by io and os packages since Go 1.16: https://tip.golang.org/doc/go1.16#ioutil"
linters:
  disable-all: true
  enable:
    # https://golangci-lint.run/usage/linters/
    - asciicheck
    - asasalint
    - bidichk
    - bodyclose
    # - deadcode -> unused
    - containedctx
    - contextcheck
    # - copyloopvar -> unknown in v1.56.2 ???
    # - cyclop -> duplicates gocyclo/maintidx
    - decorder
    - depguard
    - dogsled
    # - dupl --> annoying when writing similar sql queries
    - dupword
    - durationcheck
    - errcheck
    - exhaustive
    - errchkjson
    - errname
    - errorlint
    - exhaustive
    # - exhaustruct --> Not convinced it's useful
    # - exhaustivestruct
    - exportloopref
    - funlen
    - forbidigo
    - forcetypeassert
    # - gci
    - ginkgolinter
    - gochecknoinits
    - gochecksumtype
    # - gochecknoglobals -->
    - gocognit
    - goconst
    - gocritic
    # - gocyclo -> duplicate gocyclo
    - godot
    - godox
    - err113
    - gofmt
    # - gofumpt -> conflicts with wsl
    - goimports
    - gosimple
    # - golint --> revive
    - revive
    - mnd
    # - gomoddirectives
    # - gomodguard
    - goprintffuncname
    - gosec
    - gosmopolitan
    - gosimple
    - govet
    - grouper
    - ineffassign
    - importas
    - inamedparam
    # - intrange
    - interfacebloat
    # - interfacer --> (deprecated)
    # - ireturn --> disabled to allow interface returns (DIP compliance)
    - lll
    - loggercheck
    # - maintidx --> deplicates gocyclo
    - makezero
    - mirror
    # - maligned --> govet:fieldalignment
    # - megacheck --> (deprecated)
    - misspell
    - musttag
    - nakedret
    - prealloc
    - nestif
    - nilerr
    - nilnil
    - nolintlint
    - rowserrcheck
    - noctx
    - nonamedreturns
    # - scopelint -> exportloopref
    - nosprintfhostport
    - exportloopref
    - staticcheck
    # - structcheck -> unused
    - stylecheck
    - paralleltest
    - typecheck
    - perfsprint
    - prealloc
    - predeclared
    - reassign
    - promlinter
    - protogetter
    - rowserrcheck
    - sloglint
    - spancheck
    - sqlclosecheck
    - stylecheck
    - tagalign
    - tagliatelle
    - tenv
    - testableexamples
    # - testifylint -> disallow assert.Error which is commonly needed
    # - testpackage -> too late for that
    - thelper
    - tparallel
    - unconvert
    - unparam
    - unused
    - usestdlibvars
    - varnamelen
    - wastedassign
    # - varcheck -> unused
    - whitespace
    # - wrapcheck -> a lot of times you don't want to wrap errors
    # - wsl -> a lot of times it does not make sense, for example when you have 2 variables assigned on the same line then 2 if checks
    # - zerologlint -> Will most probably never use it
  fast: false

issues:
  # Independently from option `exclude` we use default exclude patterns,
  # it can be disabled by this option. To list all
  # excluded by default patterns execute `golangci-lint run --help`.
  # Default value for this option is true.
  exclude-use-default: false

  exclude-generated: lax

  exclude-rules:
    - path: _test\.go
      linters:
        - gochecknoglobals
        - varnamelen
        - dupl
        - funlen
        - noctx
        - lll
        - gocritic
        - containedctx
        - forcetypeassert
        - thelper
    - path: mocks
      linters:
        - gochecknoglobals
        - varnamelen
        - dupl
        - funlen
        - noctx
        - lll
        - gocritic
        - containedctx
        - forcetypeassert
        - thelper
        - typecheck
