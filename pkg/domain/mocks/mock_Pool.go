// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockPool creates a new instance of MockPool. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPool[T any](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPool[T] {
	mock := &MockPool[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPool is an autogenerated mock type for the Pool type
type MockPool[T any] struct {
	mock.Mock
}

type MockPool_Expecter[T any] struct {
	mock *mock.Mock
}

func (_m *MockPool[T]) EXPECT() *MockPool_Expecter[T] {
	return &MockPool_Expecter[T]{mock: &_m.Mock}
}

// Get provides a mock function for the type MockPool
func (_mock *MockPool[T]) Get() T {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 T
	if returnFunc, ok := ret.Get(0).(func() T); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(T)
		}
	}
	return r0
}

// MockPool_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockPool_Get_Call[T any] struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
func (_e *MockPool_Expecter[T]) Get() *MockPool_Get_Call[T] {
	return &MockPool_Get_Call[T]{Call: _e.mock.On("Get")}
}

func (_c *MockPool_Get_Call[T]) Run(run func()) *MockPool_Get_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPool_Get_Call[T]) Return(v T) *MockPool_Get_Call[T] {
	_c.Call.Return(v)
	return _c
}

func (_c *MockPool_Get_Call[T]) RunAndReturn(run func() T) *MockPool_Get_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Put provides a mock function for the type MockPool
func (_mock *MockPool[T]) Put(d T) {
	_mock.Called(d)
	return
}

// MockPool_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type MockPool_Put_Call[T any] struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - d T
func (_e *MockPool_Expecter[T]) Put(d interface{}) *MockPool_Put_Call[T] {
	return &MockPool_Put_Call[T]{Call: _e.mock.On("Put", d)}
}

func (_c *MockPool_Put_Call[T]) Run(run func(d T)) *MockPool_Put_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 T
		if args[0] != nil {
			arg0 = args[0].(T)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPool_Put_Call[T]) Return() *MockPool_Put_Call[T] {
	_c.Call.Return()
	return _c
}

func (_c *MockPool_Put_Call[T]) RunAndReturn(run func(d T)) *MockPool_Put_Call[T] {
	_c.Run(run)
	return _c
}
