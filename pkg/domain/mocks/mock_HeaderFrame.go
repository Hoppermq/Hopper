// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/hoppermq/hopper/pkg/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockHeaderFrame creates a new instance of MockHeaderFrame. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHeaderFrame(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHeaderFrame {
	mock := &MockHeaderFrame{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockHeaderFrame is an autogenerated mock type for the HeaderFrame type
type MockHeaderFrame struct {
	mock.Mock
}

type MockHeaderFrame_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHeaderFrame) EXPECT() *MockHeaderFrame_Expecter {
	return &MockHeaderFrame_Expecter{mock: &_m.Mock}
}

// GetDOFF provides a mock function for the type MockHeaderFrame
func (_mock *MockHeaderFrame) GetDOFF() domain.DOFF {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDOFF")
	}

	var r0 domain.DOFF
	if returnFunc, ok := ret.Get(0).(func() domain.DOFF); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(domain.DOFF)
	}
	return r0
}

// MockHeaderFrame_GetDOFF_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDOFF'
type MockHeaderFrame_GetDOFF_Call struct {
	*mock.Call
}

// GetDOFF is a helper method to define mock.On call
func (_e *MockHeaderFrame_Expecter) GetDOFF() *MockHeaderFrame_GetDOFF_Call {
	return &MockHeaderFrame_GetDOFF_Call{Call: _e.mock.On("GetDOFF")}
}

func (_c *MockHeaderFrame_GetDOFF_Call) Run(run func()) *MockHeaderFrame_GetDOFF_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockHeaderFrame_GetDOFF_Call) Return(dOFF domain.DOFF) *MockHeaderFrame_GetDOFF_Call {
	_c.Call.Return(dOFF)
	return _c
}

func (_c *MockHeaderFrame_GetDOFF_Call) RunAndReturn(run func() domain.DOFF) *MockHeaderFrame_GetDOFF_Call {
	_c.Call.Return(run)
	return _c
}

// GetFrameType provides a mock function for the type MockHeaderFrame
func (_mock *MockHeaderFrame) GetFrameType() domain.FrameType {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetFrameType")
	}

	var r0 domain.FrameType
	if returnFunc, ok := ret.Get(0).(func() domain.FrameType); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(domain.FrameType)
	}
	return r0
}

// MockHeaderFrame_GetFrameType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFrameType'
type MockHeaderFrame_GetFrameType_Call struct {
	*mock.Call
}

// GetFrameType is a helper method to define mock.On call
func (_e *MockHeaderFrame_Expecter) GetFrameType() *MockHeaderFrame_GetFrameType_Call {
	return &MockHeaderFrame_GetFrameType_Call{Call: _e.mock.On("GetFrameType")}
}

func (_c *MockHeaderFrame_GetFrameType_Call) Run(run func()) *MockHeaderFrame_GetFrameType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockHeaderFrame_GetFrameType_Call) Return(frameType domain.FrameType) *MockHeaderFrame_GetFrameType_Call {
	_c.Call.Return(frameType)
	return _c
}

func (_c *MockHeaderFrame_GetFrameType_Call) RunAndReturn(run func() domain.FrameType) *MockHeaderFrame_GetFrameType_Call {
	_c.Call.Return(run)
	return _c
}

// GetSize provides a mock function for the type MockHeaderFrame
func (_mock *MockHeaderFrame) GetSize() uint16 {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSize")
	}

	var r0 uint16
	if returnFunc, ok := ret.Get(0).(func() uint16); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(uint16)
	}
	return r0
}

// MockHeaderFrame_GetSize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSize'
type MockHeaderFrame_GetSize_Call struct {
	*mock.Call
}

// GetSize is a helper method to define mock.On call
func (_e *MockHeaderFrame_Expecter) GetSize() *MockHeaderFrame_GetSize_Call {
	return &MockHeaderFrame_GetSize_Call{Call: _e.mock.On("GetSize")}
}

func (_c *MockHeaderFrame_GetSize_Call) Run(run func()) *MockHeaderFrame_GetSize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockHeaderFrame_GetSize_Call) Return(v uint16) *MockHeaderFrame_GetSize_Call {
	_c.Call.Return(v)
	return _c
}

func (_c *MockHeaderFrame_GetSize_Call) RunAndReturn(run func() uint16) *MockHeaderFrame_GetSize_Call {
	_c.Call.Return(run)
	return _c
}

// SetSize provides a mock function for the type MockHeaderFrame
func (_mock *MockHeaderFrame) SetSize(v uint16) {
	_mock.Called(v)
	return
}

// MockHeaderFrame_SetSize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetSize'
type MockHeaderFrame_SetSize_Call struct {
	*mock.Call
}

// SetSize is a helper method to define mock.On call
//   - v uint16
func (_e *MockHeaderFrame_Expecter) SetSize(v interface{}) *MockHeaderFrame_SetSize_Call {
	return &MockHeaderFrame_SetSize_Call{Call: _e.mock.On("SetSize", v)}
}

func (_c *MockHeaderFrame_SetSize_Call) Run(run func(v uint16)) *MockHeaderFrame_SetSize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uint16
		if args[0] != nil {
			arg0 = args[0].(uint16)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockHeaderFrame_SetSize_Call) Return() *MockHeaderFrame_SetSize_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockHeaderFrame_SetSize_Call) RunAndReturn(run func(v uint16)) *MockHeaderFrame_SetSize_Call {
	_c.Run(run)
	return _c
}

// Validate provides a mock function for the type MockHeaderFrame
func (_mock *MockHeaderFrame) Validate() bool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Validate")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockHeaderFrame_Validate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Validate'
type MockHeaderFrame_Validate_Call struct {
	*mock.Call
}

// Validate is a helper method to define mock.On call
func (_e *MockHeaderFrame_Expecter) Validate() *MockHeaderFrame_Validate_Call {
	return &MockHeaderFrame_Validate_Call{Call: _e.mock.On("Validate")}
}

func (_c *MockHeaderFrame_Validate_Call) Run(run func()) *MockHeaderFrame_Validate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockHeaderFrame_Validate_Call) Return(b bool) *MockHeaderFrame_Validate_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockHeaderFrame_Validate_Call) RunAndReturn(run func() bool) *MockHeaderFrame_Validate_Call {
	_c.Call.Return(run)
	return _c
}
