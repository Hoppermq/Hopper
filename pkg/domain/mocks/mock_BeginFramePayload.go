// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/hoppermq/hopper/pkg/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockBeginFramePayload creates a new instance of MockBeginFramePayload. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBeginFramePayload(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBeginFramePayload {
	mock := &MockBeginFramePayload{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockBeginFramePayload is an autogenerated mock type for the BeginFramePayload type
type MockBeginFramePayload struct {
	mock.Mock
}

type MockBeginFramePayload_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBeginFramePayload) EXPECT() *MockBeginFramePayload_Expecter {
	return &MockBeginFramePayload_Expecter{mock: &_m.Mock}
}

// GetContainerID provides a mock function for the type MockBeginFramePayload
func (_mock *MockBeginFramePayload) GetContainerID() domain.ID {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetContainerID")
	}

	var r0 domain.ID
	if returnFunc, ok := ret.Get(0).(func() domain.ID); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(domain.ID)
	}
	return r0
}

// MockBeginFramePayload_GetContainerID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetContainerID'
type MockBeginFramePayload_GetContainerID_Call struct {
	*mock.Call
}

// GetContainerID is a helper method to define mock.On call
func (_e *MockBeginFramePayload_Expecter) GetContainerID() *MockBeginFramePayload_GetContainerID_Call {
	return &MockBeginFramePayload_GetContainerID_Call{Call: _e.mock.On("GetContainerID")}
}

func (_c *MockBeginFramePayload_GetContainerID_Call) Run(run func()) *MockBeginFramePayload_GetContainerID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBeginFramePayload_GetContainerID_Call) Return(iD domain.ID) *MockBeginFramePayload_GetContainerID_Call {
	_c.Call.Return(iD)
	return _c
}

func (_c *MockBeginFramePayload_GetContainerID_Call) RunAndReturn(run func() domain.ID) *MockBeginFramePayload_GetContainerID_Call {
	_c.Call.Return(run)
	return _c
}

// GetHeader provides a mock function for the type MockBeginFramePayload
func (_mock *MockBeginFramePayload) GetHeader() domain.HeaderPayload {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetHeader")
	}

	var r0 domain.HeaderPayload
	if returnFunc, ok := ret.Get(0).(func() domain.HeaderPayload); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.HeaderPayload)
		}
	}
	return r0
}

// MockBeginFramePayload_GetHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHeader'
type MockBeginFramePayload_GetHeader_Call struct {
	*mock.Call
}

// GetHeader is a helper method to define mock.On call
func (_e *MockBeginFramePayload_Expecter) GetHeader() *MockBeginFramePayload_GetHeader_Call {
	return &MockBeginFramePayload_GetHeader_Call{Call: _e.mock.On("GetHeader")}
}

func (_c *MockBeginFramePayload_GetHeader_Call) Run(run func()) *MockBeginFramePayload_GetHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBeginFramePayload_GetHeader_Call) Return(headerPayload domain.HeaderPayload) *MockBeginFramePayload_GetHeader_Call {
	_c.Call.Return(headerPayload)
	return _c
}

func (_c *MockBeginFramePayload_GetHeader_Call) RunAndReturn(run func() domain.HeaderPayload) *MockBeginFramePayload_GetHeader_Call {
	_c.Call.Return(run)
	return _c
}

// GetIncomingWindow provides a mock function for the type MockBeginFramePayload
func (_mock *MockBeginFramePayload) GetIncomingWindow() uint32 {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetIncomingWindow")
	}

	var r0 uint32
	if returnFunc, ok := ret.Get(0).(func() uint32); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(uint32)
	}
	return r0
}

// MockBeginFramePayload_GetIncomingWindow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIncomingWindow'
type MockBeginFramePayload_GetIncomingWindow_Call struct {
	*mock.Call
}

// GetIncomingWindow is a helper method to define mock.On call
func (_e *MockBeginFramePayload_Expecter) GetIncomingWindow() *MockBeginFramePayload_GetIncomingWindow_Call {
	return &MockBeginFramePayload_GetIncomingWindow_Call{Call: _e.mock.On("GetIncomingWindow")}
}

func (_c *MockBeginFramePayload_GetIncomingWindow_Call) Run(run func()) *MockBeginFramePayload_GetIncomingWindow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBeginFramePayload_GetIncomingWindow_Call) Return(v uint32) *MockBeginFramePayload_GetIncomingWindow_Call {
	_c.Call.Return(v)
	return _c
}

func (_c *MockBeginFramePayload_GetIncomingWindow_Call) RunAndReturn(run func() uint32) *MockBeginFramePayload_GetIncomingWindow_Call {
	_c.Call.Return(run)
	return _c
}

// GetNextOutgoingID provides a mock function for the type MockBeginFramePayload
func (_mock *MockBeginFramePayload) GetNextOutgoingID() uint32 {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNextOutgoingID")
	}

	var r0 uint32
	if returnFunc, ok := ret.Get(0).(func() uint32); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(uint32)
	}
	return r0
}

// MockBeginFramePayload_GetNextOutgoingID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNextOutgoingID'
type MockBeginFramePayload_GetNextOutgoingID_Call struct {
	*mock.Call
}

// GetNextOutgoingID is a helper method to define mock.On call
func (_e *MockBeginFramePayload_Expecter) GetNextOutgoingID() *MockBeginFramePayload_GetNextOutgoingID_Call {
	return &MockBeginFramePayload_GetNextOutgoingID_Call{Call: _e.mock.On("GetNextOutgoingID")}
}

func (_c *MockBeginFramePayload_GetNextOutgoingID_Call) Run(run func()) *MockBeginFramePayload_GetNextOutgoingID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBeginFramePayload_GetNextOutgoingID_Call) Return(v uint32) *MockBeginFramePayload_GetNextOutgoingID_Call {
	_c.Call.Return(v)
	return _c
}

func (_c *MockBeginFramePayload_GetNextOutgoingID_Call) RunAndReturn(run func() uint32) *MockBeginFramePayload_GetNextOutgoingID_Call {
	_c.Call.Return(run)
	return _c
}

// GetOutgoingWindow provides a mock function for the type MockBeginFramePayload
func (_mock *MockBeginFramePayload) GetOutgoingWindow() uint32 {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOutgoingWindow")
	}

	var r0 uint32
	if returnFunc, ok := ret.Get(0).(func() uint32); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(uint32)
	}
	return r0
}

// MockBeginFramePayload_GetOutgoingWindow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOutgoingWindow'
type MockBeginFramePayload_GetOutgoingWindow_Call struct {
	*mock.Call
}

// GetOutgoingWindow is a helper method to define mock.On call
func (_e *MockBeginFramePayload_Expecter) GetOutgoingWindow() *MockBeginFramePayload_GetOutgoingWindow_Call {
	return &MockBeginFramePayload_GetOutgoingWindow_Call{Call: _e.mock.On("GetOutgoingWindow")}
}

func (_c *MockBeginFramePayload_GetOutgoingWindow_Call) Run(run func()) *MockBeginFramePayload_GetOutgoingWindow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBeginFramePayload_GetOutgoingWindow_Call) Return(v uint32) *MockBeginFramePayload_GetOutgoingWindow_Call {
	_c.Call.Return(v)
	return _c
}

func (_c *MockBeginFramePayload_GetOutgoingWindow_Call) RunAndReturn(run func() uint32) *MockBeginFramePayload_GetOutgoingWindow_Call {
	_c.Call.Return(run)
	return _c
}

// GetRemoteChannel provides a mock function for the type MockBeginFramePayload
func (_mock *MockBeginFramePayload) GetRemoteChannel() uint16 {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRemoteChannel")
	}

	var r0 uint16
	if returnFunc, ok := ret.Get(0).(func() uint16); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(uint16)
	}
	return r0
}

// MockBeginFramePayload_GetRemoteChannel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRemoteChannel'
type MockBeginFramePayload_GetRemoteChannel_Call struct {
	*mock.Call
}

// GetRemoteChannel is a helper method to define mock.On call
func (_e *MockBeginFramePayload_Expecter) GetRemoteChannel() *MockBeginFramePayload_GetRemoteChannel_Call {
	return &MockBeginFramePayload_GetRemoteChannel_Call{Call: _e.mock.On("GetRemoteChannel")}
}

func (_c *MockBeginFramePayload_GetRemoteChannel_Call) Run(run func()) *MockBeginFramePayload_GetRemoteChannel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBeginFramePayload_GetRemoteChannel_Call) Return(v uint16) *MockBeginFramePayload_GetRemoteChannel_Call {
	_c.Call.Return(v)
	return _c
}

func (_c *MockBeginFramePayload_GetRemoteChannel_Call) RunAndReturn(run func() uint16) *MockBeginFramePayload_GetRemoteChannel_Call {
	_c.Call.Return(run)
	return _c
}

// GetSourceID provides a mock function for the type MockBeginFramePayload
func (_mock *MockBeginFramePayload) GetSourceID() domain.ID {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSourceID")
	}

	var r0 domain.ID
	if returnFunc, ok := ret.Get(0).(func() domain.ID); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(domain.ID)
	}
	return r0
}

// MockBeginFramePayload_GetSourceID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSourceID'
type MockBeginFramePayload_GetSourceID_Call struct {
	*mock.Call
}

// GetSourceID is a helper method to define mock.On call
func (_e *MockBeginFramePayload_Expecter) GetSourceID() *MockBeginFramePayload_GetSourceID_Call {
	return &MockBeginFramePayload_GetSourceID_Call{Call: _e.mock.On("GetSourceID")}
}

func (_c *MockBeginFramePayload_GetSourceID_Call) Run(run func()) *MockBeginFramePayload_GetSourceID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBeginFramePayload_GetSourceID_Call) Return(iD domain.ID) *MockBeginFramePayload_GetSourceID_Call {
	_c.Call.Return(iD)
	return _c
}

func (_c *MockBeginFramePayload_GetSourceID_Call) RunAndReturn(run func() domain.ID) *MockBeginFramePayload_GetSourceID_Call {
	_c.Call.Return(run)
	return _c
}

// Sizer provides a mock function for the type MockBeginFramePayload
func (_mock *MockBeginFramePayload) Sizer() uint16 {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Sizer")
	}

	var r0 uint16
	if returnFunc, ok := ret.Get(0).(func() uint16); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(uint16)
	}
	return r0
}

// MockBeginFramePayload_Sizer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sizer'
type MockBeginFramePayload_Sizer_Call struct {
	*mock.Call
}

// Sizer is a helper method to define mock.On call
func (_e *MockBeginFramePayload_Expecter) Sizer() *MockBeginFramePayload_Sizer_Call {
	return &MockBeginFramePayload_Sizer_Call{Call: _e.mock.On("Sizer")}
}

func (_c *MockBeginFramePayload_Sizer_Call) Run(run func()) *MockBeginFramePayload_Sizer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBeginFramePayload_Sizer_Call) Return(v uint16) *MockBeginFramePayload_Sizer_Call {
	_c.Call.Return(v)
	return _c
}

func (_c *MockBeginFramePayload_Sizer_Call) RunAndReturn(run func() uint16) *MockBeginFramePayload_Sizer_Call {
	_c.Call.Return(run)
	return _c
}
