// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/hoppermq/hopper/pkg/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockContainerManager creates a new instance of MockContainerManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockContainerManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockContainerManager {
	mock := &MockContainerManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockContainerManager is an autogenerated mock type for the ContainerManager type
type MockContainerManager struct {
	mock.Mock
}

type MockContainerManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockContainerManager) EXPECT() *MockContainerManager_Expecter {
	return &MockContainerManager_Expecter{mock: &_m.Mock}
}

// CreateNewContainer provides a mock function for the type MockContainerManager
func (_mock *MockContainerManager) CreateNewContainer(idGenerator func() domain.ID, clientID domain.ID) domain.Container {
	ret := _mock.Called(idGenerator, clientID)

	if len(ret) == 0 {
		panic("no return value specified for CreateNewContainer")
	}

	var r0 domain.Container
	if returnFunc, ok := ret.Get(0).(func(func() domain.ID, domain.ID) domain.Container); ok {
		r0 = returnFunc(idGenerator, clientID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Container)
		}
	}
	return r0
}

// MockContainerManager_CreateNewContainer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNewContainer'
type MockContainerManager_CreateNewContainer_Call struct {
	*mock.Call
}

// CreateNewContainer is a helper method to define mock.On call
//   - idGenerator func() domain.ID
//   - clientID domain.ID
func (_e *MockContainerManager_Expecter) CreateNewContainer(idGenerator interface{}, clientID interface{}) *MockContainerManager_CreateNewContainer_Call {
	return &MockContainerManager_CreateNewContainer_Call{Call: _e.mock.On("CreateNewContainer", idGenerator, clientID)}
}

func (_c *MockContainerManager_CreateNewContainer_Call) Run(run func(idGenerator func() domain.ID, clientID domain.ID)) *MockContainerManager_CreateNewContainer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 func() domain.ID
		if args[0] != nil {
			arg0 = args[0].(func() domain.ID)
		}
		var arg1 domain.ID
		if args[1] != nil {
			arg1 = args[1].(domain.ID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockContainerManager_CreateNewContainer_Call) Return(container domain.Container) *MockContainerManager_CreateNewContainer_Call {
	_c.Call.Return(container)
	return _c
}

func (_c *MockContainerManager_CreateNewContainer_Call) RunAndReturn(run func(idGenerator func() domain.ID, clientID domain.ID) domain.Container) *MockContainerManager_CreateNewContainer_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterContainerToTopic provides a mock function for the type MockContainerManager
func (_mock *MockContainerManager) RegisterContainerToTopic(topic string, containerID domain.ID) {
	_mock.Called(topic, containerID)
	return
}

// MockContainerManager_RegisterContainerToTopic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterContainerToTopic'
type MockContainerManager_RegisterContainerToTopic_Call struct {
	*mock.Call
}

// RegisterContainerToTopic is a helper method to define mock.On call
//   - topic string
//   - containerID domain.ID
func (_e *MockContainerManager_Expecter) RegisterContainerToTopic(topic interface{}, containerID interface{}) *MockContainerManager_RegisterContainerToTopic_Call {
	return &MockContainerManager_RegisterContainerToTopic_Call{Call: _e.mock.On("RegisterContainerToTopic", topic, containerID)}
}

func (_c *MockContainerManager_RegisterContainerToTopic_Call) Run(run func(topic string, containerID domain.ID)) *MockContainerManager_RegisterContainerToTopic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 domain.ID
		if args[1] != nil {
			arg1 = args[1].(domain.ID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockContainerManager_RegisterContainerToTopic_Call) Return() *MockContainerManager_RegisterContainerToTopic_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockContainerManager_RegisterContainerToTopic_Call) RunAndReturn(run func(topic string, containerID domain.ID)) *MockContainerManager_RegisterContainerToTopic_Call {
	_c.Run(run)
	return _c
}

// RemoveContainerFromTopic provides a mock function for the type MockContainerManager
func (_mock *MockContainerManager) RemoveContainerFromTopic(topic string, containerID domain.ID) {
	_mock.Called(topic, containerID)
	return
}

// MockContainerManager_RemoveContainerFromTopic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveContainerFromTopic'
type MockContainerManager_RemoveContainerFromTopic_Call struct {
	*mock.Call
}

// RemoveContainerFromTopic is a helper method to define mock.On call
//   - topic string
//   - containerID domain.ID
func (_e *MockContainerManager_Expecter) RemoveContainerFromTopic(topic interface{}, containerID interface{}) *MockContainerManager_RemoveContainerFromTopic_Call {
	return &MockContainerManager_RemoveContainerFromTopic_Call{Call: _e.mock.On("RemoveContainerFromTopic", topic, containerID)}
}

func (_c *MockContainerManager_RemoveContainerFromTopic_Call) Run(run func(topic string, containerID domain.ID)) *MockContainerManager_RemoveContainerFromTopic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 domain.ID
		if args[1] != nil {
			arg1 = args[1].(domain.ID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockContainerManager_RemoveContainerFromTopic_Call) Return() *MockContainerManager_RemoveContainerFromTopic_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockContainerManager_RemoveContainerFromTopic_Call) RunAndReturn(run func(topic string, containerID domain.ID)) *MockContainerManager_RemoveContainerFromTopic_Call {
	_c.Run(run)
	return _c
}
