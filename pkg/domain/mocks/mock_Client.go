// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/hoppermq/hopper/pkg/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// AttachContainer provides a mock function for the type MockClient
func (_mock *MockClient) AttachContainer(containerID domain.ID) {
	_mock.Called(containerID)
	return
}

// MockClient_AttachContainer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AttachContainer'
type MockClient_AttachContainer_Call struct {
	*mock.Call
}

// AttachContainer is a helper method to define mock.On call
//   - containerID domain.ID
func (_e *MockClient_Expecter) AttachContainer(containerID interface{}) *MockClient_AttachContainer_Call {
	return &MockClient_AttachContainer_Call{Call: _e.mock.On("AttachContainer", containerID)}
}

func (_c *MockClient_AttachContainer_Call) Run(run func(containerID domain.ID)) *MockClient_AttachContainer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 domain.ID
		if args[0] != nil {
			arg0 = args[0].(domain.ID)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClient_AttachContainer_Call) Return() *MockClient_AttachContainer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockClient_AttachContainer_Call) RunAndReturn(run func(containerID domain.ID)) *MockClient_AttachContainer_Call {
	_c.Run(run)
	return _c
}

// GetConnection provides a mock function for the type MockClient
func (_mock *MockClient) GetConnection() domain.Connection {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetConnection")
	}

	var r0 domain.Connection
	if returnFunc, ok := ret.Get(0).(func() domain.Connection); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Connection)
		}
	}
	return r0
}

// MockClient_GetConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConnection'
type MockClient_GetConnection_Call struct {
	*mock.Call
}

// GetConnection is a helper method to define mock.On call
func (_e *MockClient_Expecter) GetConnection() *MockClient_GetConnection_Call {
	return &MockClient_GetConnection_Call{Call: _e.mock.On("GetConnection")}
}

func (_c *MockClient_GetConnection_Call) Run(run func()) *MockClient_GetConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_GetConnection_Call) Return(connection domain.Connection) *MockClient_GetConnection_Call {
	_c.Call.Return(connection)
	return _c
}

func (_c *MockClient_GetConnection_Call) RunAndReturn(run func() domain.Connection) *MockClient_GetConnection_Call {
	_c.Call.Return(run)
	return _c
}

// GetID provides a mock function for the type MockClient
func (_mock *MockClient) GetID() domain.ID {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetID")
	}

	var r0 domain.ID
	if returnFunc, ok := ret.Get(0).(func() domain.ID); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(domain.ID)
	}
	return r0
}

// MockClient_GetID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetID'
type MockClient_GetID_Call struct {
	*mock.Call
}

// GetID is a helper method to define mock.On call
func (_e *MockClient_Expecter) GetID() *MockClient_GetID_Call {
	return &MockClient_GetID_Call{Call: _e.mock.On("GetID")}
}

func (_c *MockClient_GetID_Call) Run(run func()) *MockClient_GetID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_GetID_Call) Return(iD domain.ID) *MockClient_GetID_Call {
	_c.Call.Return(iD)
	return _c
}

func (_c *MockClient_GetID_Call) RunAndReturn(run func() domain.ID) *MockClient_GetID_Call {
	_c.Call.Return(run)
	return _c
}
