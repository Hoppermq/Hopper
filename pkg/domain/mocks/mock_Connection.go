// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"time"

	mock "github.com/stretchr/testify/mock"
)

// NewMockConnection creates a new instance of MockConnection. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConnection(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConnection {
	mock := &MockConnection{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockConnection is an autogenerated mock type for the Connection type
type MockConnection struct {
	mock.Mock
}

type MockConnection_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConnection) EXPECT() *MockConnection_Expecter {
	return &MockConnection_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type MockConnection
func (_mock *MockConnection) Close() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockConnection_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockConnection_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockConnection_Expecter) Close() *MockConnection_Close_Call {
	return &MockConnection_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockConnection_Close_Call) Run(run func()) *MockConnection_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConnection_Close_Call) Return(err error) *MockConnection_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockConnection_Close_Call) RunAndReturn(run func() error) *MockConnection_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function for the type MockConnection
func (_mock *MockConnection) Read(bytes []byte) (int, error) {
	ret := _mock.Called(bytes)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]byte) (int, error)); ok {
		return returnFunc(bytes)
	}
	if returnFunc, ok := ret.Get(0).(func([]byte) int); ok {
		r0 = returnFunc(bytes)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = returnFunc(bytes)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConnection_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type MockConnection_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - bytes []byte
func (_e *MockConnection_Expecter) Read(bytes interface{}) *MockConnection_Read_Call {
	return &MockConnection_Read_Call{Call: _e.mock.On("Read", bytes)}
}

func (_c *MockConnection_Read_Call) Run(run func(bytes []byte)) *MockConnection_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []byte
		if args[0] != nil {
			arg0 = args[0].([]byte)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockConnection_Read_Call) Return(n int, err error) *MockConnection_Read_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockConnection_Read_Call) RunAndReturn(run func(bytes []byte) (int, error)) *MockConnection_Read_Call {
	_c.Call.Return(run)
	return _c
}

// SetDeadline provides a mock function for the type MockConnection
func (_mock *MockConnection) SetDeadline(t time.Time) error {
	ret := _mock.Called(t)

	if len(ret) == 0 {
		panic("no return value specified for SetDeadline")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(time.Time) error); ok {
		r0 = returnFunc(t)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockConnection_SetDeadline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDeadline'
type MockConnection_SetDeadline_Call struct {
	*mock.Call
}

// SetDeadline is a helper method to define mock.On call
//   - t time.Time
func (_e *MockConnection_Expecter) SetDeadline(t interface{}) *MockConnection_SetDeadline_Call {
	return &MockConnection_SetDeadline_Call{Call: _e.mock.On("SetDeadline", t)}
}

func (_c *MockConnection_SetDeadline_Call) Run(run func(t time.Time)) *MockConnection_SetDeadline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 time.Time
		if args[0] != nil {
			arg0 = args[0].(time.Time)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockConnection_SetDeadline_Call) Return(err error) *MockConnection_SetDeadline_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockConnection_SetDeadline_Call) RunAndReturn(run func(t time.Time) error) *MockConnection_SetDeadline_Call {
	_c.Call.Return(run)
	return _c
}

// SetReadDeadline provides a mock function for the type MockConnection
func (_mock *MockConnection) SetReadDeadline(t time.Time) error {
	ret := _mock.Called(t)

	if len(ret) == 0 {
		panic("no return value specified for SetReadDeadline")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(time.Time) error); ok {
		r0 = returnFunc(t)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockConnection_SetReadDeadline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetReadDeadline'
type MockConnection_SetReadDeadline_Call struct {
	*mock.Call
}

// SetReadDeadline is a helper method to define mock.On call
//   - t time.Time
func (_e *MockConnection_Expecter) SetReadDeadline(t interface{}) *MockConnection_SetReadDeadline_Call {
	return &MockConnection_SetReadDeadline_Call{Call: _e.mock.On("SetReadDeadline", t)}
}

func (_c *MockConnection_SetReadDeadline_Call) Run(run func(t time.Time)) *MockConnection_SetReadDeadline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 time.Time
		if args[0] != nil {
			arg0 = args[0].(time.Time)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockConnection_SetReadDeadline_Call) Return(err error) *MockConnection_SetReadDeadline_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockConnection_SetReadDeadline_Call) RunAndReturn(run func(t time.Time) error) *MockConnection_SetReadDeadline_Call {
	_c.Call.Return(run)
	return _c
}

// SetWriteDeadline provides a mock function for the type MockConnection
func (_mock *MockConnection) SetWriteDeadline(t time.Time) error {
	ret := _mock.Called(t)

	if len(ret) == 0 {
		panic("no return value specified for SetWriteDeadline")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(time.Time) error); ok {
		r0 = returnFunc(t)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockConnection_SetWriteDeadline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetWriteDeadline'
type MockConnection_SetWriteDeadline_Call struct {
	*mock.Call
}

// SetWriteDeadline is a helper method to define mock.On call
//   - t time.Time
func (_e *MockConnection_Expecter) SetWriteDeadline(t interface{}) *MockConnection_SetWriteDeadline_Call {
	return &MockConnection_SetWriteDeadline_Call{Call: _e.mock.On("SetWriteDeadline", t)}
}

func (_c *MockConnection_SetWriteDeadline_Call) Run(run func(t time.Time)) *MockConnection_SetWriteDeadline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 time.Time
		if args[0] != nil {
			arg0 = args[0].(time.Time)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockConnection_SetWriteDeadline_Call) Return(err error) *MockConnection_SetWriteDeadline_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockConnection_SetWriteDeadline_Call) RunAndReturn(run func(t time.Time) error) *MockConnection_SetWriteDeadline_Call {
	_c.Call.Return(run)
	return _c
}

// Write provides a mock function for the type MockConnection
func (_mock *MockConnection) Write(bytes []byte) (int, error) {
	ret := _mock.Called(bytes)

	if len(ret) == 0 {
		panic("no return value specified for Write")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]byte) (int, error)); ok {
		return returnFunc(bytes)
	}
	if returnFunc, ok := ret.Get(0).(func([]byte) int); ok {
		r0 = returnFunc(bytes)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = returnFunc(bytes)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConnection_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type MockConnection_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
//   - bytes []byte
func (_e *MockConnection_Expecter) Write(bytes interface{}) *MockConnection_Write_Call {
	return &MockConnection_Write_Call{Call: _e.mock.On("Write", bytes)}
}

func (_c *MockConnection_Write_Call) Run(run func(bytes []byte)) *MockConnection_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []byte
		if args[0] != nil {
			arg0 = args[0].([]byte)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockConnection_Write_Call) Return(n int, err error) *MockConnection_Write_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockConnection_Write_Call) RunAndReturn(run func(bytes []byte) (int, error)) *MockConnection_Write_Call {
	_c.Call.Return(run)
	return _c
}
