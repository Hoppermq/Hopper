// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/hoppermq/hopper/pkg/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockClientManager creates a new instance of MockClientManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientManager {
	mock := &MockClientManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockClientManager is an autogenerated mock type for the ClientManager type
type MockClientManager struct {
	mock.Mock
}

type MockClientManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientManager) EXPECT() *MockClientManager_Expecter {
	return &MockClientManager_Expecter{mock: &_m.Mock}
}

// GetClient provides a mock function for the type MockClientManager
func (_mock *MockClientManager) GetClient(clientID domain.ID) domain.Client {
	ret := _mock.Called(clientID)

	if len(ret) == 0 {
		panic("no return value specified for GetClient")
	}

	var r0 domain.Client
	if returnFunc, ok := ret.Get(0).(func(domain.ID) domain.Client); ok {
		r0 = returnFunc(clientID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Client)
		}
	}
	return r0
}

// MockClientManager_GetClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClient'
type MockClientManager_GetClient_Call struct {
	*mock.Call
}

// GetClient is a helper method to define mock.On call
//   - clientID domain.ID
func (_e *MockClientManager_Expecter) GetClient(clientID interface{}) *MockClientManager_GetClient_Call {
	return &MockClientManager_GetClient_Call{Call: _e.mock.On("GetClient", clientID)}
}

func (_c *MockClientManager_GetClient_Call) Run(run func(clientID domain.ID)) *MockClientManager_GetClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 domain.ID
		if args[0] != nil {
			arg0 = args[0].(domain.ID)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClientManager_GetClient_Call) Return(client domain.Client) *MockClientManager_GetClient_Call {
	_c.Call.Return(client)
	return _c
}

func (_c *MockClientManager_GetClient_Call) RunAndReturn(run func(clientID domain.ID) domain.Client) *MockClientManager_GetClient_Call {
	_c.Call.Return(run)
	return _c
}

// HandleNewClient provides a mock function for the type MockClientManager
func (_mock *MockClientManager) HandleNewClient(conn domain.Connection) domain.Client {
	ret := _mock.Called(conn)

	if len(ret) == 0 {
		panic("no return value specified for HandleNewClient")
	}

	var r0 domain.Client
	if returnFunc, ok := ret.Get(0).(func(domain.Connection) domain.Client); ok {
		r0 = returnFunc(conn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Client)
		}
	}
	return r0
}

// MockClientManager_HandleNewClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleNewClient'
type MockClientManager_HandleNewClient_Call struct {
	*mock.Call
}

// HandleNewClient is a helper method to define mock.On call
//   - conn domain.Connection
func (_e *MockClientManager_Expecter) HandleNewClient(conn interface{}) *MockClientManager_HandleNewClient_Call {
	return &MockClientManager_HandleNewClient_Call{Call: _e.mock.On("HandleNewClient", conn)}
}

func (_c *MockClientManager_HandleNewClient_Call) Run(run func(conn domain.Connection)) *MockClientManager_HandleNewClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 domain.Connection
		if args[0] != nil {
			arg0 = args[0].(domain.Connection)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClientManager_HandleNewClient_Call) Return(client domain.Client) *MockClientManager_HandleNewClient_Call {
	_c.Call.Return(client)
	return _c
}

func (_c *MockClientManager_HandleNewClient_Call) RunAndReturn(run func(conn domain.Connection) domain.Client) *MockClientManager_HandleNewClient_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveClient provides a mock function for the type MockClientManager
func (_mock *MockClientManager) RemoveClient(clientID domain.ID) {
	_mock.Called(clientID)
	return
}

// MockClientManager_RemoveClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveClient'
type MockClientManager_RemoveClient_Call struct {
	*mock.Call
}

// RemoveClient is a helper method to define mock.On call
//   - clientID domain.ID
func (_e *MockClientManager_Expecter) RemoveClient(clientID interface{}) *MockClientManager_RemoveClient_Call {
	return &MockClientManager_RemoveClient_Call{Call: _e.mock.On("RemoveClient", clientID)}
}

func (_c *MockClientManager_RemoveClient_Call) Run(run func(clientID domain.ID)) *MockClientManager_RemoveClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 domain.ID
		if args[0] != nil {
			arg0 = args[0].(domain.ID)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClientManager_RemoveClient_Call) Return() *MockClientManager_RemoveClient_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockClientManager_RemoveClient_Call) RunAndReturn(run func(clientID domain.ID)) *MockClientManager_RemoveClient_Call {
	_c.Run(run)
	return _c
}
