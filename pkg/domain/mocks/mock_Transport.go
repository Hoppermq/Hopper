// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockTransport creates a new instance of MockTransport. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTransport(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTransport {
	mock := &MockTransport{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTransport is an autogenerated mock type for the Transport type
type MockTransport struct {
	mock.Mock
}

type MockTransport_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTransport) EXPECT() *MockTransport_Expecter {
	return &MockTransport_Expecter{mock: &_m.Mock}
}

// HandleConnection provides a mock function for the type MockTransport
func (_mock *MockTransport) HandleConnection(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for HandleConnection")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTransport_HandleConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleConnection'
type MockTransport_HandleConnection_Call struct {
	*mock.Call
}

// HandleConnection is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockTransport_Expecter) HandleConnection(ctx interface{}) *MockTransport_HandleConnection_Call {
	return &MockTransport_HandleConnection_Call{Call: _e.mock.On("HandleConnection", ctx)}
}

func (_c *MockTransport_HandleConnection_Call) Run(run func(ctx context.Context)) *MockTransport_HandleConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTransport_HandleConnection_Call) Return(err error) *MockTransport_HandleConnection_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTransport_HandleConnection_Call) RunAndReturn(run func(ctx context.Context) error) *MockTransport_HandleConnection_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function for the type MockTransport
func (_mock *MockTransport) Name() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockTransport_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockTransport_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockTransport_Expecter) Name() *MockTransport_Name_Call {
	return &MockTransport_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockTransport_Name_Call) Run(run func()) *MockTransport_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTransport_Name_Call) Return(s string) *MockTransport_Name_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockTransport_Name_Call) RunAndReturn(run func() string) *MockTransport_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Run provides a mock function for the type MockTransport
func (_mock *MockTransport) Run(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTransport_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type MockTransport_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockTransport_Expecter) Run(ctx interface{}) *MockTransport_Run_Call {
	return &MockTransport_Run_Call{Call: _e.mock.On("Run", ctx)}
}

func (_c *MockTransport_Run_Call) Run(run func(ctx context.Context)) *MockTransport_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTransport_Run_Call) Return(err error) *MockTransport_Run_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTransport_Run_Call) RunAndReturn(run func(ctx context.Context) error) *MockTransport_Run_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function for the type MockTransport
func (_mock *MockTransport) Start(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTransport_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockTransport_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockTransport_Expecter) Start(ctx interface{}) *MockTransport_Start_Call {
	return &MockTransport_Start_Call{Call: _e.mock.On("Start", ctx)}
}

func (_c *MockTransport_Start_Call) Run(run func(ctx context.Context)) *MockTransport_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTransport_Start_Call) Return(err error) *MockTransport_Start_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTransport_Start_Call) RunAndReturn(run func(ctx context.Context) error) *MockTransport_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function for the type MockTransport
func (_mock *MockTransport) Stop(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTransport_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockTransport_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockTransport_Expecter) Stop(ctx interface{}) *MockTransport_Stop_Call {
	return &MockTransport_Stop_Call{Call: _e.mock.On("Stop", ctx)}
}

func (_c *MockTransport_Stop_Call) Run(run func(ctx context.Context)) *MockTransport_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTransport_Stop_Call) Return(err error) *MockTransport_Stop_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTransport_Stop_Call) RunAndReturn(run func(ctx context.Context) error) *MockTransport_Stop_Call {
	_c.Call.Return(run)
	return _c
}
