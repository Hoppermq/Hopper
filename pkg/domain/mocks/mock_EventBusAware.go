// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/hoppermq/hopper/pkg/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockEventBusAware creates a new instance of MockEventBusAware. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEventBusAware(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEventBusAware {
	mock := &MockEventBusAware{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockEventBusAware is an autogenerated mock type for the EventBusAware type
type MockEventBusAware struct {
	mock.Mock
}

type MockEventBusAware_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEventBusAware) EXPECT() *MockEventBusAware_Expecter {
	return &MockEventBusAware_Expecter{mock: &_m.Mock}
}

// RegisterEventBus provides a mock function for the type MockEventBusAware
func (_mock *MockEventBusAware) RegisterEventBus(eventBus domain.IEventBus) {
	_mock.Called(eventBus)
	return
}

// MockEventBusAware_RegisterEventBus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterEventBus'
type MockEventBusAware_RegisterEventBus_Call struct {
	*mock.Call
}

// RegisterEventBus is a helper method to define mock.On call
//   - eventBus domain.IEventBus
func (_e *MockEventBusAware_Expecter) RegisterEventBus(eventBus interface{}) *MockEventBusAware_RegisterEventBus_Call {
	return &MockEventBusAware_RegisterEventBus_Call{Call: _e.mock.On("RegisterEventBus", eventBus)}
}

func (_c *MockEventBusAware_RegisterEventBus_Call) Run(run func(eventBus domain.IEventBus)) *MockEventBusAware_RegisterEventBus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 domain.IEventBus
		if args[0] != nil {
			arg0 = args[0].(domain.IEventBus)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockEventBusAware_RegisterEventBus_Call) Return() *MockEventBusAware_RegisterEventBus_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEventBusAware_RegisterEventBus_Call) RunAndReturn(run func(eventBus domain.IEventBus)) *MockEventBusAware_RegisterEventBus_Call {
	_c.Run(run)
	return _c
}
