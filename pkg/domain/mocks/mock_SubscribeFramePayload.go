// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/hoppermq/hopper/pkg/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockSubscribeFramePayload creates a new instance of MockSubscribeFramePayload. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSubscribeFramePayload(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSubscribeFramePayload {
	mock := &MockSubscribeFramePayload{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSubscribeFramePayload is an autogenerated mock type for the SubscribeFramePayload type
type MockSubscribeFramePayload struct {
	mock.Mock
}

type MockSubscribeFramePayload_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSubscribeFramePayload) EXPECT() *MockSubscribeFramePayload_Expecter {
	return &MockSubscribeFramePayload_Expecter{mock: &_m.Mock}
}

// GetHeader provides a mock function for the type MockSubscribeFramePayload
func (_mock *MockSubscribeFramePayload) GetHeader() domain.HeaderPayload {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetHeader")
	}

	var r0 domain.HeaderPayload
	if returnFunc, ok := ret.Get(0).(func() domain.HeaderPayload); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.HeaderPayload)
		}
	}
	return r0
}

// MockSubscribeFramePayload_GetHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHeader'
type MockSubscribeFramePayload_GetHeader_Call struct {
	*mock.Call
}

// GetHeader is a helper method to define mock.On call
func (_e *MockSubscribeFramePayload_Expecter) GetHeader() *MockSubscribeFramePayload_GetHeader_Call {
	return &MockSubscribeFramePayload_GetHeader_Call{Call: _e.mock.On("GetHeader")}
}

func (_c *MockSubscribeFramePayload_GetHeader_Call) Run(run func()) *MockSubscribeFramePayload_GetHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSubscribeFramePayload_GetHeader_Call) Return(headerPayload domain.HeaderPayload) *MockSubscribeFramePayload_GetHeader_Call {
	_c.Call.Return(headerPayload)
	return _c
}

func (_c *MockSubscribeFramePayload_GetHeader_Call) RunAndReturn(run func() domain.HeaderPayload) *MockSubscribeFramePayload_GetHeader_Call {
	_c.Call.Return(run)
	return _c
}

// GetQoS provides a mock function for the type MockSubscribeFramePayload
func (_mock *MockSubscribeFramePayload) GetQoS() uint8 {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetQoS")
	}

	var r0 uint8
	if returnFunc, ok := ret.Get(0).(func() uint8); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(uint8)
	}
	return r0
}

// MockSubscribeFramePayload_GetQoS_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQoS'
type MockSubscribeFramePayload_GetQoS_Call struct {
	*mock.Call
}

// GetQoS is a helper method to define mock.On call
func (_e *MockSubscribeFramePayload_Expecter) GetQoS() *MockSubscribeFramePayload_GetQoS_Call {
	return &MockSubscribeFramePayload_GetQoS_Call{Call: _e.mock.On("GetQoS")}
}

func (_c *MockSubscribeFramePayload_GetQoS_Call) Run(run func()) *MockSubscribeFramePayload_GetQoS_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSubscribeFramePayload_GetQoS_Call) Return(v uint8) *MockSubscribeFramePayload_GetQoS_Call {
	_c.Call.Return(v)
	return _c
}

func (_c *MockSubscribeFramePayload_GetQoS_Call) RunAndReturn(run func() uint8) *MockSubscribeFramePayload_GetQoS_Call {
	_c.Call.Return(run)
	return _c
}

// GetRoutingKey provides a mock function for the type MockSubscribeFramePayload
func (_mock *MockSubscribeFramePayload) GetRoutingKey() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRoutingKey")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockSubscribeFramePayload_GetRoutingKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRoutingKey'
type MockSubscribeFramePayload_GetRoutingKey_Call struct {
	*mock.Call
}

// GetRoutingKey is a helper method to define mock.On call
func (_e *MockSubscribeFramePayload_Expecter) GetRoutingKey() *MockSubscribeFramePayload_GetRoutingKey_Call {
	return &MockSubscribeFramePayload_GetRoutingKey_Call{Call: _e.mock.On("GetRoutingKey")}
}

func (_c *MockSubscribeFramePayload_GetRoutingKey_Call) Run(run func()) *MockSubscribeFramePayload_GetRoutingKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSubscribeFramePayload_GetRoutingKey_Call) Return(s string) *MockSubscribeFramePayload_GetRoutingKey_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockSubscribeFramePayload_GetRoutingKey_Call) RunAndReturn(run func() string) *MockSubscribeFramePayload_GetRoutingKey_Call {
	_c.Call.Return(run)
	return _c
}

// GetTopic provides a mock function for the type MockSubscribeFramePayload
func (_mock *MockSubscribeFramePayload) GetTopic() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTopic")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockSubscribeFramePayload_GetTopic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTopic'
type MockSubscribeFramePayload_GetTopic_Call struct {
	*mock.Call
}

// GetTopic is a helper method to define mock.On call
func (_e *MockSubscribeFramePayload_Expecter) GetTopic() *MockSubscribeFramePayload_GetTopic_Call {
	return &MockSubscribeFramePayload_GetTopic_Call{Call: _e.mock.On("GetTopic")}
}

func (_c *MockSubscribeFramePayload_GetTopic_Call) Run(run func()) *MockSubscribeFramePayload_GetTopic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSubscribeFramePayload_GetTopic_Call) Return(s string) *MockSubscribeFramePayload_GetTopic_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockSubscribeFramePayload_GetTopic_Call) RunAndReturn(run func() string) *MockSubscribeFramePayload_GetTopic_Call {
	_c.Call.Return(run)
	return _c
}

// Sizer provides a mock function for the type MockSubscribeFramePayload
func (_mock *MockSubscribeFramePayload) Sizer() uint16 {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Sizer")
	}

	var r0 uint16
	if returnFunc, ok := ret.Get(0).(func() uint16); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(uint16)
	}
	return r0
}

// MockSubscribeFramePayload_Sizer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sizer'
type MockSubscribeFramePayload_Sizer_Call struct {
	*mock.Call
}

// Sizer is a helper method to define mock.On call
func (_e *MockSubscribeFramePayload_Expecter) Sizer() *MockSubscribeFramePayload_Sizer_Call {
	return &MockSubscribeFramePayload_Sizer_Call{Call: _e.mock.On("Sizer")}
}

func (_c *MockSubscribeFramePayload_Sizer_Call) Run(run func()) *MockSubscribeFramePayload_Sizer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSubscribeFramePayload_Sizer_Call) Return(v uint16) *MockSubscribeFramePayload_Sizer_Call {
	_c.Call.Return(v)
	return _c
}

func (_c *MockSubscribeFramePayload_Sizer_Call) RunAndReturn(run func() uint16) *MockSubscribeFramePayload_Sizer_Call {
	_c.Call.Return(run)
	return _c
}
