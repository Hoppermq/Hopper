// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/hoppermq/hopper/pkg/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockContainer creates a new instance of MockContainer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockContainer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockContainer {
	mock := &MockContainer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockContainer is an autogenerated mock type for the Container type
type MockContainer struct {
	mock.Mock
}

type MockContainer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockContainer) EXPECT() *MockContainer_Expecter {
	return &MockContainer_Expecter{mock: &_m.Mock}
}

// CreateChannel provides a mock function for the type MockContainer
func (_mock *MockContainer) CreateChannel(topic string, idGenerator func() domain.ID) domain.Channel {
	ret := _mock.Called(topic, idGenerator)

	if len(ret) == 0 {
		panic("no return value specified for CreateChannel")
	}

	var r0 domain.Channel
	if returnFunc, ok := ret.Get(0).(func(string, func() domain.ID) domain.Channel); ok {
		r0 = returnFunc(topic, idGenerator)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Channel)
		}
	}
	return r0
}

// MockContainer_CreateChannel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateChannel'
type MockContainer_CreateChannel_Call struct {
	*mock.Call
}

// CreateChannel is a helper method to define mock.On call
//   - topic string
//   - idGenerator func() domain.ID
func (_e *MockContainer_Expecter) CreateChannel(topic interface{}, idGenerator interface{}) *MockContainer_CreateChannel_Call {
	return &MockContainer_CreateChannel_Call{Call: _e.mock.On("CreateChannel", topic, idGenerator)}
}

func (_c *MockContainer_CreateChannel_Call) Run(run func(topic string, idGenerator func() domain.ID)) *MockContainer_CreateChannel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 func() domain.ID
		if args[1] != nil {
			arg1 = args[1].(func() domain.ID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockContainer_CreateChannel_Call) Return(channel domain.Channel) *MockContainer_CreateChannel_Call {
	_c.Call.Return(channel)
	return _c
}

func (_c *MockContainer_CreateChannel_Call) RunAndReturn(run func(topic string, idGenerator func() domain.ID) domain.Channel) *MockContainer_CreateChannel_Call {
	_c.Call.Return(run)
	return _c
}

// GetID provides a mock function for the type MockContainer
func (_mock *MockContainer) GetID() domain.ID {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetID")
	}

	var r0 domain.ID
	if returnFunc, ok := ret.Get(0).(func() domain.ID); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(domain.ID)
	}
	return r0
}

// MockContainer_GetID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetID'
type MockContainer_GetID_Call struct {
	*mock.Call
}

// GetID is a helper method to define mock.On call
func (_e *MockContainer_Expecter) GetID() *MockContainer_GetID_Call {
	return &MockContainer_GetID_Call{Call: _e.mock.On("GetID")}
}

func (_c *MockContainer_GetID_Call) Run(run func()) *MockContainer_GetID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockContainer_GetID_Call) Return(iD domain.ID) *MockContainer_GetID_Call {
	_c.Call.Return(iD)
	return _c
}

func (_c *MockContainer_GetID_Call) RunAndReturn(run func() domain.ID) *MockContainer_GetID_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveChannel provides a mock function for the type MockContainer
func (_mock *MockContainer) RemoveChannel(topic string) {
	_mock.Called(topic)
	return
}

// MockContainer_RemoveChannel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveChannel'
type MockContainer_RemoveChannel_Call struct {
	*mock.Call
}

// RemoveChannel is a helper method to define mock.On call
//   - topic string
func (_e *MockContainer_Expecter) RemoveChannel(topic interface{}) *MockContainer_RemoveChannel_Call {
	return &MockContainer_RemoveChannel_Call{Call: _e.mock.On("RemoveChannel", topic)}
}

func (_c *MockContainer_RemoveChannel_Call) Run(run func(topic string)) *MockContainer_RemoveChannel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockContainer_RemoveChannel_Call) Return() *MockContainer_RemoveChannel_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockContainer_RemoveChannel_Call) RunAndReturn(run func(topic string)) *MockContainer_RemoveChannel_Call {
	_c.Run(run)
	return _c
}

// SetState provides a mock function for the type MockContainer
func (_mock *MockContainer) SetState(state domain.ContainerState) {
	_mock.Called(state)
	return
}

// MockContainer_SetState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetState'
type MockContainer_SetState_Call struct {
	*mock.Call
}

// SetState is a helper method to define mock.On call
//   - state domain.ContainerState
func (_e *MockContainer_Expecter) SetState(state interface{}) *MockContainer_SetState_Call {
	return &MockContainer_SetState_Call{Call: _e.mock.On("SetState", state)}
}

func (_c *MockContainer_SetState_Call) Run(run func(state domain.ContainerState)) *MockContainer_SetState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 domain.ContainerState
		if args[0] != nil {
			arg0 = args[0].(domain.ContainerState)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockContainer_SetState_Call) Return() *MockContainer_SetState_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockContainer_SetState_Call) RunAndReturn(run func(state domain.ContainerState)) *MockContainer_SetState_Call {
	_c.Run(run)
	return _c
}
