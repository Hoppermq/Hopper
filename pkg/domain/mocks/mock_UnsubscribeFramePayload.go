// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/hoppermq/hopper/pkg/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockUnsubscribeFramePayload creates a new instance of MockUnsubscribeFramePayload. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUnsubscribeFramePayload(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUnsubscribeFramePayload {
	mock := &MockUnsubscribeFramePayload{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUnsubscribeFramePayload is an autogenerated mock type for the UnsubscribeFramePayload type
type MockUnsubscribeFramePayload struct {
	mock.Mock
}

type MockUnsubscribeFramePayload_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUnsubscribeFramePayload) EXPECT() *MockUnsubscribeFramePayload_Expecter {
	return &MockUnsubscribeFramePayload_Expecter{mock: &_m.Mock}
}

// GetHeader provides a mock function for the type MockUnsubscribeFramePayload
func (_mock *MockUnsubscribeFramePayload) GetHeader() domain.HeaderPayload {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetHeader")
	}

	var r0 domain.HeaderPayload
	if returnFunc, ok := ret.Get(0).(func() domain.HeaderPayload); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.HeaderPayload)
		}
	}
	return r0
}

// MockUnsubscribeFramePayload_GetHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHeader'
type MockUnsubscribeFramePayload_GetHeader_Call struct {
	*mock.Call
}

// GetHeader is a helper method to define mock.On call
func (_e *MockUnsubscribeFramePayload_Expecter) GetHeader() *MockUnsubscribeFramePayload_GetHeader_Call {
	return &MockUnsubscribeFramePayload_GetHeader_Call{Call: _e.mock.On("GetHeader")}
}

func (_c *MockUnsubscribeFramePayload_GetHeader_Call) Run(run func()) *MockUnsubscribeFramePayload_GetHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUnsubscribeFramePayload_GetHeader_Call) Return(headerPayload domain.HeaderPayload) *MockUnsubscribeFramePayload_GetHeader_Call {
	_c.Call.Return(headerPayload)
	return _c
}

func (_c *MockUnsubscribeFramePayload_GetHeader_Call) RunAndReturn(run func() domain.HeaderPayload) *MockUnsubscribeFramePayload_GetHeader_Call {
	_c.Call.Return(run)
	return _c
}

// GetTopic provides a mock function for the type MockUnsubscribeFramePayload
func (_mock *MockUnsubscribeFramePayload) GetTopic() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTopic")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockUnsubscribeFramePayload_GetTopic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTopic'
type MockUnsubscribeFramePayload_GetTopic_Call struct {
	*mock.Call
}

// GetTopic is a helper method to define mock.On call
func (_e *MockUnsubscribeFramePayload_Expecter) GetTopic() *MockUnsubscribeFramePayload_GetTopic_Call {
	return &MockUnsubscribeFramePayload_GetTopic_Call{Call: _e.mock.On("GetTopic")}
}

func (_c *MockUnsubscribeFramePayload_GetTopic_Call) Run(run func()) *MockUnsubscribeFramePayload_GetTopic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUnsubscribeFramePayload_GetTopic_Call) Return(s string) *MockUnsubscribeFramePayload_GetTopic_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockUnsubscribeFramePayload_GetTopic_Call) RunAndReturn(run func() string) *MockUnsubscribeFramePayload_GetTopic_Call {
	_c.Call.Return(run)
	return _c
}

// Sizer provides a mock function for the type MockUnsubscribeFramePayload
func (_mock *MockUnsubscribeFramePayload) Sizer() uint16 {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Sizer")
	}

	var r0 uint16
	if returnFunc, ok := ret.Get(0).(func() uint16); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(uint16)
	}
	return r0
}

// MockUnsubscribeFramePayload_Sizer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sizer'
type MockUnsubscribeFramePayload_Sizer_Call struct {
	*mock.Call
}

// Sizer is a helper method to define mock.On call
func (_e *MockUnsubscribeFramePayload_Expecter) Sizer() *MockUnsubscribeFramePayload_Sizer_Call {
	return &MockUnsubscribeFramePayload_Sizer_Call{Call: _e.mock.On("Sizer")}
}

func (_c *MockUnsubscribeFramePayload_Sizer_Call) Run(run func()) *MockUnsubscribeFramePayload_Sizer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUnsubscribeFramePayload_Sizer_Call) Return(v uint16) *MockUnsubscribeFramePayload_Sizer_Call {
	_c.Call.Return(v)
	return _c
}

func (_c *MockUnsubscribeFramePayload_Sizer_Call) RunAndReturn(run func() uint16) *MockUnsubscribeFramePayload_Sizer_Call {
	_c.Call.Return(run)
	return _c
}
