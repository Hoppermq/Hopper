// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockHeaderPayload creates a new instance of MockHeaderPayload. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHeaderPayload(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHeaderPayload {
	mock := &MockHeaderPayload{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockHeaderPayload is an autogenerated mock type for the HeaderPayload type
type MockHeaderPayload struct {
	mock.Mock
}

type MockHeaderPayload_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHeaderPayload) EXPECT() *MockHeaderPayload_Expecter {
	return &MockHeaderPayload_Expecter{mock: &_m.Mock}
}

// Sizer provides a mock function for the type MockHeaderPayload
func (_mock *MockHeaderPayload) Sizer() uint16 {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Sizer")
	}

	var r0 uint16
	if returnFunc, ok := ret.Get(0).(func() uint16); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(uint16)
	}
	return r0
}

// MockHeaderPayload_Sizer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sizer'
type MockHeaderPayload_Sizer_Call struct {
	*mock.Call
}

// Sizer is a helper method to define mock.On call
func (_e *MockHeaderPayload_Expecter) Sizer() *MockHeaderPayload_Sizer_Call {
	return &MockHeaderPayload_Sizer_Call{Call: _e.mock.On("Sizer")}
}

func (_c *MockHeaderPayload_Sizer_Call) Run(run func()) *MockHeaderPayload_Sizer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockHeaderPayload_Sizer_Call) Return(v uint16) *MockHeaderPayload_Sizer_Call {
	_c.Call.Return(v)
	return _c
}

func (_c *MockHeaderPayload_Sizer_Call) RunAndReturn(run func() uint16) *MockHeaderPayload_Sizer_Call {
	_c.Call.Return(run)
	return _c
}
