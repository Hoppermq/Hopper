// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/hoppermq/hopper/pkg/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockFrameManager creates a new instance of MockFrameManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFrameManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFrameManager {
	mock := &MockFrameManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockFrameManager is an autogenerated mock type for the FrameManager type
type MockFrameManager struct {
	mock.Mock
}

type MockFrameManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFrameManager) EXPECT() *MockFrameManager_Expecter {
	return &MockFrameManager_Expecter{mock: &_m.Mock}
}

// IsControlFrame provides a mock function for the type MockFrameManager
func (_mock *MockFrameManager) IsControlFrame(f domain.FrameType) bool {
	ret := _mock.Called(f)

	if len(ret) == 0 {
		panic("no return value specified for IsControlFrame")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(domain.FrameType) bool); ok {
		r0 = returnFunc(f)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockFrameManager_IsControlFrame_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsControlFrame'
type MockFrameManager_IsControlFrame_Call struct {
	*mock.Call
}

// IsControlFrame is a helper method to define mock.On call
//   - f domain.FrameType
func (_e *MockFrameManager_Expecter) IsControlFrame(f interface{}) *MockFrameManager_IsControlFrame_Call {
	return &MockFrameManager_IsControlFrame_Call{Call: _e.mock.On("IsControlFrame", f)}
}

func (_c *MockFrameManager_IsControlFrame_Call) Run(run func(f domain.FrameType)) *MockFrameManager_IsControlFrame_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 domain.FrameType
		if args[0] != nil {
			arg0 = args[0].(domain.FrameType)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockFrameManager_IsControlFrame_Call) Return(b bool) *MockFrameManager_IsControlFrame_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockFrameManager_IsControlFrame_Call) RunAndReturn(run func(f domain.FrameType) bool) *MockFrameManager_IsControlFrame_Call {
	_c.Call.Return(run)
	return _c
}

// IsErrorFrame provides a mock function for the type MockFrameManager
func (_mock *MockFrameManager) IsErrorFrame(f domain.FrameType) bool {
	ret := _mock.Called(f)

	if len(ret) == 0 {
		panic("no return value specified for IsErrorFrame")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(domain.FrameType) bool); ok {
		r0 = returnFunc(f)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockFrameManager_IsErrorFrame_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsErrorFrame'
type MockFrameManager_IsErrorFrame_Call struct {
	*mock.Call
}

// IsErrorFrame is a helper method to define mock.On call
//   - f domain.FrameType
func (_e *MockFrameManager_Expecter) IsErrorFrame(f interface{}) *MockFrameManager_IsErrorFrame_Call {
	return &MockFrameManager_IsErrorFrame_Call{Call: _e.mock.On("IsErrorFrame", f)}
}

func (_c *MockFrameManager_IsErrorFrame_Call) Run(run func(f domain.FrameType)) *MockFrameManager_IsErrorFrame_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 domain.FrameType
		if args[0] != nil {
			arg0 = args[0].(domain.FrameType)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockFrameManager_IsErrorFrame_Call) Return(b bool) *MockFrameManager_IsErrorFrame_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockFrameManager_IsErrorFrame_Call) RunAndReturn(run func(f domain.FrameType) bool) *MockFrameManager_IsErrorFrame_Call {
	_c.Call.Return(run)
	return _c
}

// IsMessageFrame provides a mock function for the type MockFrameManager
func (_mock *MockFrameManager) IsMessageFrame(f domain.FrameType) bool {
	ret := _mock.Called(f)

	if len(ret) == 0 {
		panic("no return value specified for IsMessageFrame")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(domain.FrameType) bool); ok {
		r0 = returnFunc(f)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockFrameManager_IsMessageFrame_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsMessageFrame'
type MockFrameManager_IsMessageFrame_Call struct {
	*mock.Call
}

// IsMessageFrame is a helper method to define mock.On call
//   - f domain.FrameType
func (_e *MockFrameManager_Expecter) IsMessageFrame(f interface{}) *MockFrameManager_IsMessageFrame_Call {
	return &MockFrameManager_IsMessageFrame_Call{Call: _e.mock.On("IsMessageFrame", f)}
}

func (_c *MockFrameManager_IsMessageFrame_Call) Run(run func(f domain.FrameType)) *MockFrameManager_IsMessageFrame_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 domain.FrameType
		if args[0] != nil {
			arg0 = args[0].(domain.FrameType)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockFrameManager_IsMessageFrame_Call) Return(b bool) *MockFrameManager_IsMessageFrame_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockFrameManager_IsMessageFrame_Call) RunAndReturn(run func(f domain.FrameType) bool) *MockFrameManager_IsMessageFrame_Call {
	_c.Call.Return(run)
	return _c
}
