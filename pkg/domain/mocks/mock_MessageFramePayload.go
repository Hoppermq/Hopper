// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/hoppermq/hopper/pkg/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockMessageFramePayload creates a new instance of MockMessageFramePayload. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMessageFramePayload(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMessageFramePayload {
	mock := &MockMessageFramePayload{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMessageFramePayload is an autogenerated mock type for the MessageFramePayload type
type MockMessageFramePayload struct {
	mock.Mock
}

type MockMessageFramePayload_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMessageFramePayload) EXPECT() *MockMessageFramePayload_Expecter {
	return &MockMessageFramePayload_Expecter{mock: &_m.Mock}
}

// GetContent provides a mock function for the type MockMessageFramePayload
func (_mock *MockMessageFramePayload) GetContent() []byte {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetContent")
	}

	var r0 []byte
	if returnFunc, ok := ret.Get(0).(func() []byte); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	return r0
}

// MockMessageFramePayload_GetContent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetContent'
type MockMessageFramePayload_GetContent_Call struct {
	*mock.Call
}

// GetContent is a helper method to define mock.On call
func (_e *MockMessageFramePayload_Expecter) GetContent() *MockMessageFramePayload_GetContent_Call {
	return &MockMessageFramePayload_GetContent_Call{Call: _e.mock.On("GetContent")}
}

func (_c *MockMessageFramePayload_GetContent_Call) Run(run func()) *MockMessageFramePayload_GetContent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMessageFramePayload_GetContent_Call) Return(bytes []byte) *MockMessageFramePayload_GetContent_Call {
	_c.Call.Return(bytes)
	return _c
}

func (_c *MockMessageFramePayload_GetContent_Call) RunAndReturn(run func() []byte) *MockMessageFramePayload_GetContent_Call {
	_c.Call.Return(run)
	return _c
}

// GetHeader provides a mock function for the type MockMessageFramePayload
func (_mock *MockMessageFramePayload) GetHeader() domain.HeaderPayload {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetHeader")
	}

	var r0 domain.HeaderPayload
	if returnFunc, ok := ret.Get(0).(func() domain.HeaderPayload); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.HeaderPayload)
		}
	}
	return r0
}

// MockMessageFramePayload_GetHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHeader'
type MockMessageFramePayload_GetHeader_Call struct {
	*mock.Call
}

// GetHeader is a helper method to define mock.On call
func (_e *MockMessageFramePayload_Expecter) GetHeader() *MockMessageFramePayload_GetHeader_Call {
	return &MockMessageFramePayload_GetHeader_Call{Call: _e.mock.On("GetHeader")}
}

func (_c *MockMessageFramePayload_GetHeader_Call) Run(run func()) *MockMessageFramePayload_GetHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMessageFramePayload_GetHeader_Call) Return(headerPayload domain.HeaderPayload) *MockMessageFramePayload_GetHeader_Call {
	_c.Call.Return(headerPayload)
	return _c
}

func (_c *MockMessageFramePayload_GetHeader_Call) RunAndReturn(run func() domain.HeaderPayload) *MockMessageFramePayload_GetHeader_Call {
	_c.Call.Return(run)
	return _c
}

// GetHeaders provides a mock function for the type MockMessageFramePayload
func (_mock *MockMessageFramePayload) GetHeaders() map[string]string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetHeaders")
	}

	var r0 map[string]string
	if returnFunc, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}
	return r0
}

// MockMessageFramePayload_GetHeaders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHeaders'
type MockMessageFramePayload_GetHeaders_Call struct {
	*mock.Call
}

// GetHeaders is a helper method to define mock.On call
func (_e *MockMessageFramePayload_Expecter) GetHeaders() *MockMessageFramePayload_GetHeaders_Call {
	return &MockMessageFramePayload_GetHeaders_Call{Call: _e.mock.On("GetHeaders")}
}

func (_c *MockMessageFramePayload_GetHeaders_Call) Run(run func()) *MockMessageFramePayload_GetHeaders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMessageFramePayload_GetHeaders_Call) Return(stringToString map[string]string) *MockMessageFramePayload_GetHeaders_Call {
	_c.Call.Return(stringToString)
	return _c
}

func (_c *MockMessageFramePayload_GetHeaders_Call) RunAndReturn(run func() map[string]string) *MockMessageFramePayload_GetHeaders_Call {
	_c.Call.Return(run)
	return _c
}

// GetMessageID provides a mock function for the type MockMessageFramePayload
func (_mock *MockMessageFramePayload) GetMessageID() domain.ID {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMessageID")
	}

	var r0 domain.ID
	if returnFunc, ok := ret.Get(0).(func() domain.ID); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(domain.ID)
	}
	return r0
}

// MockMessageFramePayload_GetMessageID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMessageID'
type MockMessageFramePayload_GetMessageID_Call struct {
	*mock.Call
}

// GetMessageID is a helper method to define mock.On call
func (_e *MockMessageFramePayload_Expecter) GetMessageID() *MockMessageFramePayload_GetMessageID_Call {
	return &MockMessageFramePayload_GetMessageID_Call{Call: _e.mock.On("GetMessageID")}
}

func (_c *MockMessageFramePayload_GetMessageID_Call) Run(run func()) *MockMessageFramePayload_GetMessageID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMessageFramePayload_GetMessageID_Call) Return(iD domain.ID) *MockMessageFramePayload_GetMessageID_Call {
	_c.Call.Return(iD)
	return _c
}

func (_c *MockMessageFramePayload_GetMessageID_Call) RunAndReturn(run func() domain.ID) *MockMessageFramePayload_GetMessageID_Call {
	_c.Call.Return(run)
	return _c
}

// GetSourceID provides a mock function for the type MockMessageFramePayload
func (_mock *MockMessageFramePayload) GetSourceID() domain.ID {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSourceID")
	}

	var r0 domain.ID
	if returnFunc, ok := ret.Get(0).(func() domain.ID); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(domain.ID)
	}
	return r0
}

// MockMessageFramePayload_GetSourceID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSourceID'
type MockMessageFramePayload_GetSourceID_Call struct {
	*mock.Call
}

// GetSourceID is a helper method to define mock.On call
func (_e *MockMessageFramePayload_Expecter) GetSourceID() *MockMessageFramePayload_GetSourceID_Call {
	return &MockMessageFramePayload_GetSourceID_Call{Call: _e.mock.On("GetSourceID")}
}

func (_c *MockMessageFramePayload_GetSourceID_Call) Run(run func()) *MockMessageFramePayload_GetSourceID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMessageFramePayload_GetSourceID_Call) Return(iD domain.ID) *MockMessageFramePayload_GetSourceID_Call {
	_c.Call.Return(iD)
	return _c
}

func (_c *MockMessageFramePayload_GetSourceID_Call) RunAndReturn(run func() domain.ID) *MockMessageFramePayload_GetSourceID_Call {
	_c.Call.Return(run)
	return _c
}

// GetTopic provides a mock function for the type MockMessageFramePayload
func (_mock *MockMessageFramePayload) GetTopic() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTopic")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockMessageFramePayload_GetTopic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTopic'
type MockMessageFramePayload_GetTopic_Call struct {
	*mock.Call
}

// GetTopic is a helper method to define mock.On call
func (_e *MockMessageFramePayload_Expecter) GetTopic() *MockMessageFramePayload_GetTopic_Call {
	return &MockMessageFramePayload_GetTopic_Call{Call: _e.mock.On("GetTopic")}
}

func (_c *MockMessageFramePayload_GetTopic_Call) Run(run func()) *MockMessageFramePayload_GetTopic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMessageFramePayload_GetTopic_Call) Return(s string) *MockMessageFramePayload_GetTopic_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockMessageFramePayload_GetTopic_Call) RunAndReturn(run func() string) *MockMessageFramePayload_GetTopic_Call {
	_c.Call.Return(run)
	return _c
}

// Sizer provides a mock function for the type MockMessageFramePayload
func (_mock *MockMessageFramePayload) Sizer() uint16 {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Sizer")
	}

	var r0 uint16
	if returnFunc, ok := ret.Get(0).(func() uint16); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(uint16)
	}
	return r0
}

// MockMessageFramePayload_Sizer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sizer'
type MockMessageFramePayload_Sizer_Call struct {
	*mock.Call
}

// Sizer is a helper method to define mock.On call
func (_e *MockMessageFramePayload_Expecter) Sizer() *MockMessageFramePayload_Sizer_Call {
	return &MockMessageFramePayload_Sizer_Call{Call: _e.mock.On("Sizer")}
}

func (_c *MockMessageFramePayload_Sizer_Call) Run(run func()) *MockMessageFramePayload_Sizer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMessageFramePayload_Sizer_Call) Return(v uint16) *MockMessageFramePayload_Sizer_Call {
	_c.Call.Return(v)
	return _c
}

func (_c *MockMessageFramePayload_Sizer_Call) RunAndReturn(run func() uint16) *MockMessageFramePayload_Sizer_Call {
	_c.Call.Return(run)
	return _c
}
