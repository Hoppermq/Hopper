// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/hoppermq/hopper/pkg/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockEvent creates a new instance of MockEvent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEvent(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEvent {
	mock := &MockEvent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockEvent is an autogenerated mock type for the Event type
type MockEvent struct {
	mock.Mock
}

type MockEvent_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEvent) EXPECT() *MockEvent_Expecter {
	return &MockEvent_Expecter{mock: &_m.Mock}
}

// GetTransport provides a mock function for the type MockEvent
func (_mock *MockEvent) GetTransport() domain.TransportType {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTransport")
	}

	var r0 domain.TransportType
	if returnFunc, ok := ret.Get(0).(func() domain.TransportType); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(domain.TransportType)
	}
	return r0
}

// MockEvent_GetTransport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransport'
type MockEvent_GetTransport_Call struct {
	*mock.Call
}

// GetTransport is a helper method to define mock.On call
func (_e *MockEvent_Expecter) GetTransport() *MockEvent_GetTransport_Call {
	return &MockEvent_GetTransport_Call{Call: _e.mock.On("GetTransport")}
}

func (_c *MockEvent_GetTransport_Call) Run(run func()) *MockEvent_GetTransport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEvent_GetTransport_Call) Return(transportType domain.TransportType) *MockEvent_GetTransport_Call {
	_c.Call.Return(transportType)
	return _c
}

func (_c *MockEvent_GetTransport_Call) RunAndReturn(run func() domain.TransportType) *MockEvent_GetTransport_Call {
	_c.Call.Return(run)
	return _c
}

// GetType provides a mock function for the type MockEvent
func (_mock *MockEvent) GetType() domain.EventType {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetType")
	}

	var r0 domain.EventType
	if returnFunc, ok := ret.Get(0).(func() domain.EventType); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(domain.EventType)
	}
	return r0
}

// MockEvent_GetType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetType'
type MockEvent_GetType_Call struct {
	*mock.Call
}

// GetType is a helper method to define mock.On call
func (_e *MockEvent_Expecter) GetType() *MockEvent_GetType_Call {
	return &MockEvent_GetType_Call{Call: _e.mock.On("GetType")}
}

func (_c *MockEvent_GetType_Call) Run(run func()) *MockEvent_GetType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEvent_GetType_Call) Return(eventType domain.EventType) *MockEvent_GetType_Call {
	_c.Call.Return(eventType)
	return _c
}

func (_c *MockEvent_GetType_Call) RunAndReturn(run func() domain.EventType) *MockEvent_GetType_Call {
	_c.Call.Return(run)
	return _c
}
