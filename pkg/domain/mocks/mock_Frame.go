// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/hoppermq/hopper/pkg/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockFrame creates a new instance of MockFrame. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFrame(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFrame {
	mock := &MockFrame{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockFrame is an autogenerated mock type for the Frame type
type MockFrame struct {
	mock.Mock
}

type MockFrame_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFrame) EXPECT() *MockFrame_Expecter {
	return &MockFrame_Expecter{mock: &_m.Mock}
}

// CanHandle provides a mock function for the type MockFrame
func (_mock *MockFrame) CanHandle(frameType domain.FrameType) bool {
	ret := _mock.Called(frameType)

	if len(ret) == 0 {
		panic("no return value specified for CanHandle")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(domain.FrameType) bool); ok {
		r0 = returnFunc(frameType)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockFrame_CanHandle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CanHandle'
type MockFrame_CanHandle_Call struct {
	*mock.Call
}

// CanHandle is a helper method to define mock.On call
//   - frameType domain.FrameType
func (_e *MockFrame_Expecter) CanHandle(frameType interface{}) *MockFrame_CanHandle_Call {
	return &MockFrame_CanHandle_Call{Call: _e.mock.On("CanHandle", frameType)}
}

func (_c *MockFrame_CanHandle_Call) Run(run func(frameType domain.FrameType)) *MockFrame_CanHandle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 domain.FrameType
		if args[0] != nil {
			arg0 = args[0].(domain.FrameType)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockFrame_CanHandle_Call) Return(b bool) *MockFrame_CanHandle_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockFrame_CanHandle_Call) RunAndReturn(run func(frameType domain.FrameType) bool) *MockFrame_CanHandle_Call {
	_c.Call.Return(run)
	return _c
}

// GetHeader provides a mock function for the type MockFrame
func (_mock *MockFrame) GetHeader() domain.HeaderFrame {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetHeader")
	}

	var r0 domain.HeaderFrame
	if returnFunc, ok := ret.Get(0).(func() domain.HeaderFrame); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.HeaderFrame)
		}
	}
	return r0
}

// MockFrame_GetHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHeader'
type MockFrame_GetHeader_Call struct {
	*mock.Call
}

// GetHeader is a helper method to define mock.On call
func (_e *MockFrame_Expecter) GetHeader() *MockFrame_GetHeader_Call {
	return &MockFrame_GetHeader_Call{Call: _e.mock.On("GetHeader")}
}

func (_c *MockFrame_GetHeader_Call) Run(run func()) *MockFrame_GetHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFrame_GetHeader_Call) Return(headerFrame domain.HeaderFrame) *MockFrame_GetHeader_Call {
	_c.Call.Return(headerFrame)
	return _c
}

func (_c *MockFrame_GetHeader_Call) RunAndReturn(run func() domain.HeaderFrame) *MockFrame_GetHeader_Call {
	_c.Call.Return(run)
	return _c
}

// GetPayload provides a mock function for the type MockFrame
func (_mock *MockFrame) GetPayload() domain.Payload {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPayload")
	}

	var r0 domain.Payload
	if returnFunc, ok := ret.Get(0).(func() domain.Payload); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Payload)
		}
	}
	return r0
}

// MockFrame_GetPayload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPayload'
type MockFrame_GetPayload_Call struct {
	*mock.Call
}

// GetPayload is a helper method to define mock.On call
func (_e *MockFrame_Expecter) GetPayload() *MockFrame_GetPayload_Call {
	return &MockFrame_GetPayload_Call{Call: _e.mock.On("GetPayload")}
}

func (_c *MockFrame_GetPayload_Call) Run(run func()) *MockFrame_GetPayload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFrame_GetPayload_Call) Return(payload domain.Payload) *MockFrame_GetPayload_Call {
	_c.Call.Return(payload)
	return _c
}

func (_c *MockFrame_GetPayload_Call) RunAndReturn(run func() domain.Payload) *MockFrame_GetPayload_Call {
	_c.Call.Return(run)
	return _c
}

// GetType provides a mock function for the type MockFrame
func (_mock *MockFrame) GetType() domain.FrameType {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetType")
	}

	var r0 domain.FrameType
	if returnFunc, ok := ret.Get(0).(func() domain.FrameType); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(domain.FrameType)
	}
	return r0
}

// MockFrame_GetType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetType'
type MockFrame_GetType_Call struct {
	*mock.Call
}

// GetType is a helper method to define mock.On call
func (_e *MockFrame_Expecter) GetType() *MockFrame_GetType_Call {
	return &MockFrame_GetType_Call{Call: _e.mock.On("GetType")}
}

func (_c *MockFrame_GetType_Call) Run(run func()) *MockFrame_GetType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFrame_GetType_Call) Return(frameType domain.FrameType) *MockFrame_GetType_Call {
	_c.Call.Return(frameType)
	return _c
}

func (_c *MockFrame_GetType_Call) RunAndReturn(run func() domain.FrameType) *MockFrame_GetType_Call {
	_c.Call.Return(run)
	return _c
}
