// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/hoppermq/hopper/pkg/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockErrorFramePayload creates a new instance of MockErrorFramePayload. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockErrorFramePayload(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockErrorFramePayload {
	mock := &MockErrorFramePayload{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockErrorFramePayload is an autogenerated mock type for the ErrorFramePayload type
type MockErrorFramePayload struct {
	mock.Mock
}

type MockErrorFramePayload_Expecter struct {
	mock *mock.Mock
}

func (_m *MockErrorFramePayload) EXPECT() *MockErrorFramePayload_Expecter {
	return &MockErrorFramePayload_Expecter{mock: &_m.Mock}
}

// GetDetails provides a mock function for the type MockErrorFramePayload
func (_mock *MockErrorFramePayload) GetDetails() map[string]string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDetails")
	}

	var r0 map[string]string
	if returnFunc, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}
	return r0
}

// MockErrorFramePayload_GetDetails_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDetails'
type MockErrorFramePayload_GetDetails_Call struct {
	*mock.Call
}

// GetDetails is a helper method to define mock.On call
func (_e *MockErrorFramePayload_Expecter) GetDetails() *MockErrorFramePayload_GetDetails_Call {
	return &MockErrorFramePayload_GetDetails_Call{Call: _e.mock.On("GetDetails")}
}

func (_c *MockErrorFramePayload_GetDetails_Call) Run(run func()) *MockErrorFramePayload_GetDetails_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockErrorFramePayload_GetDetails_Call) Return(stringToString map[string]string) *MockErrorFramePayload_GetDetails_Call {
	_c.Call.Return(stringToString)
	return _c
}

func (_c *MockErrorFramePayload_GetDetails_Call) RunAndReturn(run func() map[string]string) *MockErrorFramePayload_GetDetails_Call {
	_c.Call.Return(run)
	return _c
}

// GetErrorCode provides a mock function for the type MockErrorFramePayload
func (_mock *MockErrorFramePayload) GetErrorCode() uint16 {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetErrorCode")
	}

	var r0 uint16
	if returnFunc, ok := ret.Get(0).(func() uint16); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(uint16)
	}
	return r0
}

// MockErrorFramePayload_GetErrorCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetErrorCode'
type MockErrorFramePayload_GetErrorCode_Call struct {
	*mock.Call
}

// GetErrorCode is a helper method to define mock.On call
func (_e *MockErrorFramePayload_Expecter) GetErrorCode() *MockErrorFramePayload_GetErrorCode_Call {
	return &MockErrorFramePayload_GetErrorCode_Call{Call: _e.mock.On("GetErrorCode")}
}

func (_c *MockErrorFramePayload_GetErrorCode_Call) Run(run func()) *MockErrorFramePayload_GetErrorCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockErrorFramePayload_GetErrorCode_Call) Return(v uint16) *MockErrorFramePayload_GetErrorCode_Call {
	_c.Call.Return(v)
	return _c
}

func (_c *MockErrorFramePayload_GetErrorCode_Call) RunAndReturn(run func() uint16) *MockErrorFramePayload_GetErrorCode_Call {
	_c.Call.Return(run)
	return _c
}

// GetErrorMessage provides a mock function for the type MockErrorFramePayload
func (_mock *MockErrorFramePayload) GetErrorMessage() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetErrorMessage")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockErrorFramePayload_GetErrorMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetErrorMessage'
type MockErrorFramePayload_GetErrorMessage_Call struct {
	*mock.Call
}

// GetErrorMessage is a helper method to define mock.On call
func (_e *MockErrorFramePayload_Expecter) GetErrorMessage() *MockErrorFramePayload_GetErrorMessage_Call {
	return &MockErrorFramePayload_GetErrorMessage_Call{Call: _e.mock.On("GetErrorMessage")}
}

func (_c *MockErrorFramePayload_GetErrorMessage_Call) Run(run func()) *MockErrorFramePayload_GetErrorMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockErrorFramePayload_GetErrorMessage_Call) Return(s string) *MockErrorFramePayload_GetErrorMessage_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockErrorFramePayload_GetErrorMessage_Call) RunAndReturn(run func() string) *MockErrorFramePayload_GetErrorMessage_Call {
	_c.Call.Return(run)
	return _c
}

// GetHeader provides a mock function for the type MockErrorFramePayload
func (_mock *MockErrorFramePayload) GetHeader() domain.HeaderPayload {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetHeader")
	}

	var r0 domain.HeaderPayload
	if returnFunc, ok := ret.Get(0).(func() domain.HeaderPayload); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.HeaderPayload)
		}
	}
	return r0
}

// MockErrorFramePayload_GetHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHeader'
type MockErrorFramePayload_GetHeader_Call struct {
	*mock.Call
}

// GetHeader is a helper method to define mock.On call
func (_e *MockErrorFramePayload_Expecter) GetHeader() *MockErrorFramePayload_GetHeader_Call {
	return &MockErrorFramePayload_GetHeader_Call{Call: _e.mock.On("GetHeader")}
}

func (_c *MockErrorFramePayload_GetHeader_Call) Run(run func()) *MockErrorFramePayload_GetHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockErrorFramePayload_GetHeader_Call) Return(headerPayload domain.HeaderPayload) *MockErrorFramePayload_GetHeader_Call {
	_c.Call.Return(headerPayload)
	return _c
}

func (_c *MockErrorFramePayload_GetHeader_Call) RunAndReturn(run func() domain.HeaderPayload) *MockErrorFramePayload_GetHeader_Call {
	_c.Call.Return(run)
	return _c
}

// Sizer provides a mock function for the type MockErrorFramePayload
func (_mock *MockErrorFramePayload) Sizer() uint16 {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Sizer")
	}

	var r0 uint16
	if returnFunc, ok := ret.Get(0).(func() uint16); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(uint16)
	}
	return r0
}

// MockErrorFramePayload_Sizer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sizer'
type MockErrorFramePayload_Sizer_Call struct {
	*mock.Call
}

// Sizer is a helper method to define mock.On call
func (_e *MockErrorFramePayload_Expecter) Sizer() *MockErrorFramePayload_Sizer_Call {
	return &MockErrorFramePayload_Sizer_Call{Call: _e.mock.On("Sizer")}
}

func (_c *MockErrorFramePayload_Sizer_Call) Run(run func()) *MockErrorFramePayload_Sizer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockErrorFramePayload_Sizer_Call) Return(v uint16) *MockErrorFramePayload_Sizer_Call {
	_c.Call.Return(v)
	return _c
}

func (_c *MockErrorFramePayload_Sizer_Call) RunAndReturn(run func() uint16) *MockErrorFramePayload_Sizer_Call {
	_c.Call.Return(run)
	return _c
}
