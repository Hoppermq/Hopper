// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/hoppermq/hopper/pkg/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockIEventBus creates a new instance of MockIEventBus. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIEventBus(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIEventBus {
	mock := &MockIEventBus{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIEventBus is an autogenerated mock type for the IEventBus type
type MockIEventBus struct {
	mock.Mock
}

type MockIEventBus_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIEventBus) EXPECT() *MockIEventBus_Expecter {
	return &MockIEventBus_Expecter{mock: &_m.Mock}
}

// Publish provides a mock function for the type MockIEventBus
func (_mock *MockIEventBus) Publish(ctx context.Context, event domain.Event) error {
	ret := _mock.Called(ctx, event)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Event) error); ok {
		r0 = returnFunc(ctx, event)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIEventBus_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type MockIEventBus_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - ctx context.Context
//   - event domain.Event
func (_e *MockIEventBus_Expecter) Publish(ctx interface{}, event interface{}) *MockIEventBus_Publish_Call {
	return &MockIEventBus_Publish_Call{Call: _e.mock.On("Publish", ctx, event)}
}

func (_c *MockIEventBus_Publish_Call) Run(run func(ctx context.Context, event domain.Event)) *MockIEventBus_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.Event
		if args[1] != nil {
			arg1 = args[1].(domain.Event)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIEventBus_Publish_Call) Return(err error) *MockIEventBus_Publish_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIEventBus_Publish_Call) RunAndReturn(run func(ctx context.Context, event domain.Event) error) *MockIEventBus_Publish_Call {
	_c.Call.Return(run)
	return _c
}

// Subscribe provides a mock function for the type MockIEventBus
func (_mock *MockIEventBus) Subscribe(eventType string) <-chan domain.Event {
	ret := _mock.Called(eventType)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 <-chan domain.Event
	if returnFunc, ok := ret.Get(0).(func(string) <-chan domain.Event); ok {
		r0 = returnFunc(eventType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan domain.Event)
		}
	}
	return r0
}

// MockIEventBus_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type MockIEventBus_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - eventType string
func (_e *MockIEventBus_Expecter) Subscribe(eventType interface{}) *MockIEventBus_Subscribe_Call {
	return &MockIEventBus_Subscribe_Call{Call: _e.mock.On("Subscribe", eventType)}
}

func (_c *MockIEventBus_Subscribe_Call) Run(run func(eventType string)) *MockIEventBus_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIEventBus_Subscribe_Call) Return(eventCh <-chan domain.Event) *MockIEventBus_Subscribe_Call {
	_c.Call.Return(eventCh)
	return _c
}

func (_c *MockIEventBus_Subscribe_Call) RunAndReturn(run func(eventType string) <-chan domain.Event) *MockIEventBus_Subscribe_Call {
	_c.Call.Return(run)
	return _c
}
