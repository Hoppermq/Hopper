// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/hoppermq/hopper/pkg/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockCloseFramePayload creates a new instance of MockCloseFramePayload. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCloseFramePayload(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCloseFramePayload {
	mock := &MockCloseFramePayload{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCloseFramePayload is an autogenerated mock type for the CloseFramePayload type
type MockCloseFramePayload struct {
	mock.Mock
}

type MockCloseFramePayload_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCloseFramePayload) EXPECT() *MockCloseFramePayload_Expecter {
	return &MockCloseFramePayload_Expecter{mock: &_m.Mock}
}

// GetCode provides a mock function for the type MockCloseFramePayload
func (_mock *MockCloseFramePayload) GetCode() uint16 {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCode")
	}

	var r0 uint16
	if returnFunc, ok := ret.Get(0).(func() uint16); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(uint16)
	}
	return r0
}

// MockCloseFramePayload_GetCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCode'
type MockCloseFramePayload_GetCode_Call struct {
	*mock.Call
}

// GetCode is a helper method to define mock.On call
func (_e *MockCloseFramePayload_Expecter) GetCode() *MockCloseFramePayload_GetCode_Call {
	return &MockCloseFramePayload_GetCode_Call{Call: _e.mock.On("GetCode")}
}

func (_c *MockCloseFramePayload_GetCode_Call) Run(run func()) *MockCloseFramePayload_GetCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCloseFramePayload_GetCode_Call) Return(v uint16) *MockCloseFramePayload_GetCode_Call {
	_c.Call.Return(v)
	return _c
}

func (_c *MockCloseFramePayload_GetCode_Call) RunAndReturn(run func() uint16) *MockCloseFramePayload_GetCode_Call {
	_c.Call.Return(run)
	return _c
}

// GetHeader provides a mock function for the type MockCloseFramePayload
func (_mock *MockCloseFramePayload) GetHeader() domain.HeaderPayload {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetHeader")
	}

	var r0 domain.HeaderPayload
	if returnFunc, ok := ret.Get(0).(func() domain.HeaderPayload); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.HeaderPayload)
		}
	}
	return r0
}

// MockCloseFramePayload_GetHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHeader'
type MockCloseFramePayload_GetHeader_Call struct {
	*mock.Call
}

// GetHeader is a helper method to define mock.On call
func (_e *MockCloseFramePayload_Expecter) GetHeader() *MockCloseFramePayload_GetHeader_Call {
	return &MockCloseFramePayload_GetHeader_Call{Call: _e.mock.On("GetHeader")}
}

func (_c *MockCloseFramePayload_GetHeader_Call) Run(run func()) *MockCloseFramePayload_GetHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCloseFramePayload_GetHeader_Call) Return(headerPayload domain.HeaderPayload) *MockCloseFramePayload_GetHeader_Call {
	_c.Call.Return(headerPayload)
	return _c
}

func (_c *MockCloseFramePayload_GetHeader_Call) RunAndReturn(run func() domain.HeaderPayload) *MockCloseFramePayload_GetHeader_Call {
	_c.Call.Return(run)
	return _c
}

// GetReason provides a mock function for the type MockCloseFramePayload
func (_mock *MockCloseFramePayload) GetReason() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetReason")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockCloseFramePayload_GetReason_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReason'
type MockCloseFramePayload_GetReason_Call struct {
	*mock.Call
}

// GetReason is a helper method to define mock.On call
func (_e *MockCloseFramePayload_Expecter) GetReason() *MockCloseFramePayload_GetReason_Call {
	return &MockCloseFramePayload_GetReason_Call{Call: _e.mock.On("GetReason")}
}

func (_c *MockCloseFramePayload_GetReason_Call) Run(run func()) *MockCloseFramePayload_GetReason_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCloseFramePayload_GetReason_Call) Return(s string) *MockCloseFramePayload_GetReason_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockCloseFramePayload_GetReason_Call) RunAndReturn(run func() string) *MockCloseFramePayload_GetReason_Call {
	_c.Call.Return(run)
	return _c
}

// Sizer provides a mock function for the type MockCloseFramePayload
func (_mock *MockCloseFramePayload) Sizer() uint16 {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Sizer")
	}

	var r0 uint16
	if returnFunc, ok := ret.Get(0).(func() uint16); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(uint16)
	}
	return r0
}

// MockCloseFramePayload_Sizer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sizer'
type MockCloseFramePayload_Sizer_Call struct {
	*mock.Call
}

// Sizer is a helper method to define mock.On call
func (_e *MockCloseFramePayload_Expecter) Sizer() *MockCloseFramePayload_Sizer_Call {
	return &MockCloseFramePayload_Sizer_Call{Call: _e.mock.On("Sizer")}
}

func (_c *MockCloseFramePayload_Sizer_Call) Run(run func()) *MockCloseFramePayload_Sizer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCloseFramePayload_Sizer_Call) Return(v uint16) *MockCloseFramePayload_Sizer_Call {
	_c.Call.Return(v)
	return _c
}

func (_c *MockCloseFramePayload_Sizer_Call) RunAndReturn(run func() uint16) *MockCloseFramePayload_Sizer_Call {
	_c.Call.Return(run)
	return _c
}
