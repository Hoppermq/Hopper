// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/hoppermq/hopper/pkg/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockIService creates a new instance of MockIService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIService {
	mock := &MockIService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIService is an autogenerated mock type for the IService type
type MockIService struct {
	mock.Mock
}

type MockIService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIService) EXPECT() *MockIService_Expecter {
	return &MockIService_Expecter{mock: &_m.Mock}
}

// Name provides a mock function for the type MockIService
func (_mock *MockIService) Name() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockIService_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockIService_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockIService_Expecter) Name() *MockIService_Name_Call {
	return &MockIService_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockIService_Name_Call) Run(run func()) *MockIService_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIService_Name_Call) Return(s string) *MockIService_Name_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockIService_Name_Call) RunAndReturn(run func() string) *MockIService_Name_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterEventBus provides a mock function for the type MockIService
func (_mock *MockIService) RegisterEventBus(eb domain.IEventBus) {
	_mock.Called(eb)
	return
}

// MockIService_RegisterEventBus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterEventBus'
type MockIService_RegisterEventBus_Call struct {
	*mock.Call
}

// RegisterEventBus is a helper method to define mock.On call
//   - eb domain.IEventBus
func (_e *MockIService_Expecter) RegisterEventBus(eb interface{}) *MockIService_RegisterEventBus_Call {
	return &MockIService_RegisterEventBus_Call{Call: _e.mock.On("RegisterEventBus", eb)}
}

func (_c *MockIService_RegisterEventBus_Call) Run(run func(eb domain.IEventBus)) *MockIService_RegisterEventBus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 domain.IEventBus
		if args[0] != nil {
			arg0 = args[0].(domain.IEventBus)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIService_RegisterEventBus_Call) Return() *MockIService_RegisterEventBus_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockIService_RegisterEventBus_Call) RunAndReturn(run func(eb domain.IEventBus)) *MockIService_RegisterEventBus_Call {
	_c.Run(run)
	return _c
}

// Run provides a mock function for the type MockIService
func (_mock *MockIService) Run(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIService_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type MockIService_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockIService_Expecter) Run(ctx interface{}) *MockIService_Run_Call {
	return &MockIService_Run_Call{Call: _e.mock.On("Run", ctx)}
}

func (_c *MockIService_Run_Call) Run(run func(ctx context.Context)) *MockIService_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIService_Run_Call) Return(err error) *MockIService_Run_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIService_Run_Call) RunAndReturn(run func(ctx context.Context) error) *MockIService_Run_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function for the type MockIService
func (_mock *MockIService) Stop(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIService_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockIService_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockIService_Expecter) Stop(ctx interface{}) *MockIService_Stop_Call {
	return &MockIService_Stop_Call{Call: _e.mock.On("Stop", ctx)}
}

func (_c *MockIService_Stop_Call) Run(run func(ctx context.Context)) *MockIService_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIService_Stop_Call) Return(err error) *MockIService_Stop_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIService_Stop_Call) RunAndReturn(run func(ctx context.Context) error) *MockIService_Stop_Call {
	_c.Call.Return(run)
	return _c
}
