// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/hoppermq/hopper/pkg/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockSerializable creates a new instance of MockSerializable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSerializable(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSerializable {
	mock := &MockSerializable{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSerializable is an autogenerated mock type for the Serializable type
type MockSerializable struct {
	mock.Mock
}

type MockSerializable_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSerializable) EXPECT() *MockSerializable_Expecter {
	return &MockSerializable_Expecter{mock: &_m.Mock}
}

// Deserialize provides a mock function for the type MockSerializable
func (_mock *MockSerializable) Deserialize(data []byte) (domain.Serializable, error) {
	ret := _mock.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for Deserialize")
	}

	var r0 domain.Serializable
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]byte) (domain.Serializable, error)); ok {
		return returnFunc(data)
	}
	if returnFunc, ok := ret.Get(0).(func([]byte) domain.Serializable); ok {
		r0 = returnFunc(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Serializable)
		}
	}
	if returnFunc, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = returnFunc(data)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSerializable_Deserialize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Deserialize'
type MockSerializable_Deserialize_Call struct {
	*mock.Call
}

// Deserialize is a helper method to define mock.On call
//   - data []byte
func (_e *MockSerializable_Expecter) Deserialize(data interface{}) *MockSerializable_Deserialize_Call {
	return &MockSerializable_Deserialize_Call{Call: _e.mock.On("Deserialize", data)}
}

func (_c *MockSerializable_Deserialize_Call) Run(run func(data []byte)) *MockSerializable_Deserialize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []byte
		if args[0] != nil {
			arg0 = args[0].([]byte)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSerializable_Deserialize_Call) Return(serializable domain.Serializable, err error) *MockSerializable_Deserialize_Call {
	_c.Call.Return(serializable, err)
	return _c
}

func (_c *MockSerializable_Deserialize_Call) RunAndReturn(run func(data []byte) (domain.Serializable, error)) *MockSerializable_Deserialize_Call {
	_c.Call.Return(run)
	return _c
}

// Serialize provides a mock function for the type MockSerializable
func (_mock *MockSerializable) Serialize() ([]byte, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Serialize")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []byte); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSerializable_Serialize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Serialize'
type MockSerializable_Serialize_Call struct {
	*mock.Call
}

// Serialize is a helper method to define mock.On call
func (_e *MockSerializable_Expecter) Serialize() *MockSerializable_Serialize_Call {
	return &MockSerializable_Serialize_Call{Call: _e.mock.On("Serialize")}
}

func (_c *MockSerializable_Serialize_Call) Run(run func()) *MockSerializable_Serialize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSerializable_Serialize_Call) Return(bytes []byte, err error) *MockSerializable_Serialize_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *MockSerializable_Serialize_Call) RunAndReturn(run func() ([]byte, error)) *MockSerializable_Serialize_Call {
	_c.Call.Return(run)
	return _c
}
